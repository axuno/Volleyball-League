//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
////////////////////////////////////////////////////////////// 
using System;
using System.Linq;
using TournamentManager.DAL.EntityClasses;
using TournamentManager.DAL.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using SD.LLBLGen.Pro.QuerySpec.AdapterSpecific;
using SD.LLBLGen.Pro.QuerySpec;

namespace TournamentManager.DAL.FactoryClasses
{
	/// <summary>Factory class to produce DynamicQuery instances and EntityQuery instances</summary>
	public partial class QueryFactory : QueryFactoryBase2
	{
		/// <summary>Creates and returns a new EntityQuery for the AvailableMatchDate entity</summary>
		public EntityQuery<AvailableMatchDateEntity> AvailableMatchDate { get { return Create<AvailableMatchDateEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ExcludeMatchDate entity</summary>
		public EntityQuery<ExcludeMatchDateEntity> ExcludeMatchDate { get { return Create<ExcludeMatchDateEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the IdentityRole entity</summary>
		public EntityQuery<IdentityRoleEntity> IdentityRole { get { return Create<IdentityRoleEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the IdentityRoleClaim entity</summary>
		public EntityQuery<IdentityRoleClaimEntity> IdentityRoleClaim { get { return Create<IdentityRoleClaimEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the IdentityUserClaim entity</summary>
		public EntityQuery<IdentityUserClaimEntity> IdentityUserClaim { get { return Create<IdentityUserClaimEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the IdentityUserLogin entity</summary>
		public EntityQuery<IdentityUserLoginEntity> IdentityUserLogin { get { return Create<IdentityUserLoginEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the IdentityUserRole entity</summary>
		public EntityQuery<IdentityUserRoleEntity> IdentityUserRole { get { return Create<IdentityUserRoleEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the IdentityUserToken entity</summary>
		public EntityQuery<IdentityUserTokenEntity> IdentityUserToken { get { return Create<IdentityUserTokenEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the ManagerOfTeam entity</summary>
		public EntityQuery<ManagerOfTeamEntity> ManagerOfTeam { get { return Create<ManagerOfTeamEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Match entity</summary>
		public EntityQuery<MatchEntity> Match { get { return Create<MatchEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the MatchRule entity</summary>
		public EntityQuery<MatchRuleEntity> MatchRule { get { return Create<MatchRuleEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the PlayerInTeam entity</summary>
		public EntityQuery<PlayerInTeamEntity> PlayerInTeam { get { return Create<PlayerInTeamEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Ranking entity</summary>
		public EntityQuery<RankingEntity> Ranking { get { return Create<RankingEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Registration entity</summary>
		public EntityQuery<RegistrationEntity> Registration { get { return Create<RegistrationEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Round entity</summary>
		public EntityQuery<RoundEntity> Round { get { return Create<RoundEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the RoundLeg entity</summary>
		public EntityQuery<RoundLegEntity> RoundLeg { get { return Create<RoundLegEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the RoundType entity</summary>
		public EntityQuery<RoundTypeEntity> RoundType { get { return Create<RoundTypeEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Set entity</summary>
		public EntityQuery<SetEntity> Set { get { return Create<SetEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the SetRule entity</summary>
		public EntityQuery<SetRuleEntity> SetRule { get { return Create<SetRuleEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Team entity</summary>
		public EntityQuery<TeamEntity> Team { get { return Create<TeamEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the TeamInRound entity</summary>
		public EntityQuery<TeamInRoundEntity> TeamInRound { get { return Create<TeamInRoundEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Tournament entity</summary>
		public EntityQuery<TournamentEntity> Tournament { get { return Create<TournamentEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the TournamentType entity</summary>
		public EntityQuery<TournamentTypeEntity> TournamentType { get { return Create<TournamentTypeEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the User entity</summary>
		public EntityQuery<UserEntity> User { get { return Create<UserEntity>(); } }

		/// <summary>Creates and returns a new EntityQuery for the Venue entity</summary>
		public EntityQuery<VenueEntity> Venue { get { return Create<VenueEntity>(); } }

		/// <inheritdoc/>
		protected override IElementCreatorCore CreateElementCreator() { return new ElementCreator(); }
 
		/// <summary>Creates and returns the query to fetch the typed view Calendar</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.CalendarRow> Calendar
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.CalendarRow, TournamentManager.DAL.HelperClasses.CalendarFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view CompletedMatch</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.CompletedMatchRow> CompletedMatch
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.CompletedMatchRow, TournamentManager.DAL.HelperClasses.CompletedMatchFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view LatestTeamTournament</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.LatestTeamTournamentRow> LatestTeamTournament
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.LatestTeamTournamentRow, TournamentManager.DAL.HelperClasses.LatestTeamTournamentFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view MatchCompleteRaw</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.MatchCompleteRawRow> MatchCompleteRaw
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.MatchCompleteRawRow, TournamentManager.DAL.HelperClasses.MatchCompleteRawFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view MatchReportSheet</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.MatchReportSheetRow> MatchReportSheet
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.MatchReportSheetRow, TournamentManager.DAL.HelperClasses.MatchReportSheetFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view MatchToPlayRaw</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.MatchToPlayRawRow> MatchToPlayRaw
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.MatchToPlayRawRow, TournamentManager.DAL.HelperClasses.MatchToPlayRawFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view PlannedMatch</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.PlannedMatchRow> PlannedMatch
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.PlannedMatchRow, TournamentManager.DAL.HelperClasses.PlannedMatchFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view RankingList</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.RankingListRow> RankingList
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.RankingListRow, TournamentManager.DAL.HelperClasses.RankingListFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view RoundLegPeriod</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.RoundLegPeriodRow> RoundLegPeriod
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.RoundLegPeriodRow, TournamentManager.DAL.HelperClasses.RoundLegPeriodFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view RoundTeam</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.RoundTeamRow> RoundTeam
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.RoundTeamRow, TournamentManager.DAL.HelperClasses.RoundTeamFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view TeamUserRound</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.TeamUserRoundRow> TeamUserRound
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.TeamUserRoundRow, TournamentManager.DAL.HelperClasses.TeamUserRoundFields>(); }
		}

		/// <summary>Creates and returns the query to fetch the typed view TeamVenueRound</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.TeamVenueRoundRow> TeamVenueRound
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.TeamVenueRoundRow, TournamentManager.DAL.HelperClasses.TeamVenueRoundFields>(); }
		}

		/// <summary>Gets the projection to project the resultset of stored procedure dbo.VenueDistance to the typed view VenueDistanceResult</summary>
		/// <returns>Projection in the form of a Dynamic Query which projects to <see cref="TournamentManager.DAL.TypedViewClasses.VenueDistanceResultRow"/> instances </returns>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.VenueDistanceResultRow> GetVenueDistanceResultTypedViewProjection()
		{
			return this.Create().Select(ProjectionLambdaCreator.Create<TournamentManager.DAL.TypedViewClasses.VenueDistanceResultRow>(ModelInfoProviderSingleton.GetInstance().GetTypedViewFields("VenueDistanceResultTypedView"), true));
		}

		/// <summary>Creates and returns the query to fetch the typed view VenueTeam</summary>
		public DynamicQuery<TournamentManager.DAL.TypedViewClasses.VenueTeamRow> VenueTeam
		{
			get { return this.Create().Select<TournamentManager.DAL.TypedViewClasses.VenueTeamRow, TournamentManager.DAL.HelperClasses.VenueTeamFields>(); }
		}

	}
}