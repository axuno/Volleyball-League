//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using TournamentManager.DAL.EntityClasses;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.RelationClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.FactoryClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>general base class for the generated factories</summary>
	[Serializable]
	public partial class EntityFactoryBase2<TEntity> : EntityFactoryCore2
		where TEntity : EntityBase2, IEntity2
	{
		private readonly TournamentManager.DAL.EntityType _typeOfEntity;
		private readonly bool _isInHierarchy;

		/// <summary>CTor</summary>
		/// <param name="entityName">Name of the entity.</param>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <param name="isInHierarchy">If true, the entity of this factory is in an inheritance hierarchy, false otherwise</param>
		public EntityFactoryBase2(string entityName, TournamentManager.DAL.EntityType typeOfEntity, bool isInHierarchy) : base(entityName)
		{
			_typeOfEntity = typeOfEntity;
			_isInHierarchy = isInHierarchy;
		}
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateFields() { return ModelInfoProviderSingleton.GetInstance().GetEntityFields(this.ForEntityName); }
		
		/// <inheritdoc/>
		public override IEntity2 CreateEntityFromEntityTypeValue(int entityTypeValue) {	return GeneralEntityFactory.Create((TournamentManager.DAL.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		public override IRelationCollection CreateHierarchyRelations(string objectAlias) { return ModelInfoProviderSingleton.GetInstance().GetHierarchyRelations(this.ForEntityName, objectAlias); }

		/// <inheritdoc/>
		public override IEntityFactory2 GetEntityFactory(object[] fieldValues, Dictionary<string, int> entityFieldStartIndexesPerEntity) 
		{
			return (IEntityFactory2)ModelInfoProviderSingleton.GetInstance().GetEntityFactory(this.ForEntityName, fieldValues, entityFieldStartIndexesPerEntity) ?? this;
		}
		
		/// <inheritdoc/>
		public override IPredicateExpression GetEntityTypeFilter(bool negate, string objectAlias) {	return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter(this.ForEntityName, objectAlias, negate);	}
						
		/// <inheritdoc/>
		public override IEntityCollection2 CreateEntityCollection()	{ return new EntityCollection<TEntity>(this); }
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateHierarchyFields() 
		{
			return _isInHierarchy ? new EntityFields2(ModelInfoProviderSingleton.GetInstance().GetHierarchyFields(this.ForEntityName), ModelInfoProviderSingleton.GetInstance(), null) : base.CreateHierarchyFields();
		}
		
		/// <inheritdoc/>
		protected override Type ForEntityType { get { return typeof(TEntity); } }
	}

	/// <summary>Factory to create new, empty AvailableMatchDateEntity objects.</summary>
	[Serializable]
	public partial class AvailableMatchDateEntityFactory : EntityFactoryBase2<AvailableMatchDateEntity> 
	{
		/// <summary>CTor</summary>
		public AvailableMatchDateEntityFactory() : base("AvailableMatchDateEntity", TournamentManager.DAL.EntityType.AvailableMatchDateEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AvailableMatchDateEntity(fields); }
	}

	/// <summary>Factory to create new, empty ExcludeMatchDateEntity objects.</summary>
	[Serializable]
	public partial class ExcludeMatchDateEntityFactory : EntityFactoryBase2<ExcludeMatchDateEntity> 
	{
		/// <summary>CTor</summary>
		public ExcludeMatchDateEntityFactory() : base("ExcludeMatchDateEntity", TournamentManager.DAL.EntityType.ExcludeMatchDateEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ExcludeMatchDateEntity(fields); }
	}

	/// <summary>Factory to create new, empty IdentityRoleEntity objects.</summary>
	[Serializable]
	public partial class IdentityRoleEntityFactory : EntityFactoryBase2<IdentityRoleEntity> 
	{
		/// <summary>CTor</summary>
		public IdentityRoleEntityFactory() : base("IdentityRoleEntity", TournamentManager.DAL.EntityType.IdentityRoleEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new IdentityRoleEntity(fields); }
	}

	/// <summary>Factory to create new, empty IdentityRoleClaimEntity objects.</summary>
	[Serializable]
	public partial class IdentityRoleClaimEntityFactory : EntityFactoryBase2<IdentityRoleClaimEntity> 
	{
		/// <summary>CTor</summary>
		public IdentityRoleClaimEntityFactory() : base("IdentityRoleClaimEntity", TournamentManager.DAL.EntityType.IdentityRoleClaimEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new IdentityRoleClaimEntity(fields); }
	}

	/// <summary>Factory to create new, empty IdentityUserClaimEntity objects.</summary>
	[Serializable]
	public partial class IdentityUserClaimEntityFactory : EntityFactoryBase2<IdentityUserClaimEntity> 
	{
		/// <summary>CTor</summary>
		public IdentityUserClaimEntityFactory() : base("IdentityUserClaimEntity", TournamentManager.DAL.EntityType.IdentityUserClaimEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new IdentityUserClaimEntity(fields); }
	}

	/// <summary>Factory to create new, empty IdentityUserLoginEntity objects.</summary>
	[Serializable]
	public partial class IdentityUserLoginEntityFactory : EntityFactoryBase2<IdentityUserLoginEntity> 
	{
		/// <summary>CTor</summary>
		public IdentityUserLoginEntityFactory() : base("IdentityUserLoginEntity", TournamentManager.DAL.EntityType.IdentityUserLoginEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new IdentityUserLoginEntity(fields); }
	}

	/// <summary>Factory to create new, empty IdentityUserRoleEntity objects.</summary>
	[Serializable]
	public partial class IdentityUserRoleEntityFactory : EntityFactoryBase2<IdentityUserRoleEntity> 
	{
		/// <summary>CTor</summary>
		public IdentityUserRoleEntityFactory() : base("IdentityUserRoleEntity", TournamentManager.DAL.EntityType.IdentityUserRoleEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new IdentityUserRoleEntity(fields); }
	}

	/// <summary>Factory to create new, empty IdentityUserTokenEntity objects.</summary>
	[Serializable]
	public partial class IdentityUserTokenEntityFactory : EntityFactoryBase2<IdentityUserTokenEntity> 
	{
		/// <summary>CTor</summary>
		public IdentityUserTokenEntityFactory() : base("IdentityUserTokenEntity", TournamentManager.DAL.EntityType.IdentityUserTokenEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new IdentityUserTokenEntity(fields); }
	}

	/// <summary>Factory to create new, empty ManagerOfTeamEntity objects.</summary>
	[Serializable]
	public partial class ManagerOfTeamEntityFactory : EntityFactoryBase2<ManagerOfTeamEntity> 
	{
		/// <summary>CTor</summary>
		public ManagerOfTeamEntityFactory() : base("ManagerOfTeamEntity", TournamentManager.DAL.EntityType.ManagerOfTeamEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ManagerOfTeamEntity(fields); }
	}

	/// <summary>Factory to create new, empty MatchEntity objects.</summary>
	[Serializable]
	public partial class MatchEntityFactory : EntityFactoryBase2<MatchEntity> 
	{
		/// <summary>CTor</summary>
		public MatchEntityFactory() : base("MatchEntity", TournamentManager.DAL.EntityType.MatchEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new MatchEntity(fields); }
	}

	/// <summary>Factory to create new, empty MatchRuleEntity objects.</summary>
	[Serializable]
	public partial class MatchRuleEntityFactory : EntityFactoryBase2<MatchRuleEntity> 
	{
		/// <summary>CTor</summary>
		public MatchRuleEntityFactory() : base("MatchRuleEntity", TournamentManager.DAL.EntityType.MatchRuleEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new MatchRuleEntity(fields); }
	}

	/// <summary>Factory to create new, empty PlayerInTeamEntity objects.</summary>
	[Serializable]
	public partial class PlayerInTeamEntityFactory : EntityFactoryBase2<PlayerInTeamEntity> 
	{
		/// <summary>CTor</summary>
		public PlayerInTeamEntityFactory() : base("PlayerInTeamEntity", TournamentManager.DAL.EntityType.PlayerInTeamEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PlayerInTeamEntity(fields); }
	}

	/// <summary>Factory to create new, empty RankingEntity objects.</summary>
	[Serializable]
	public partial class RankingEntityFactory : EntityFactoryBase2<RankingEntity> 
	{
		/// <summary>CTor</summary>
		public RankingEntityFactory() : base("RankingEntity", TournamentManager.DAL.EntityType.RankingEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new RankingEntity(fields); }
	}

	/// <summary>Factory to create new, empty RegistrationEntity objects.</summary>
	[Serializable]
	public partial class RegistrationEntityFactory : EntityFactoryBase2<RegistrationEntity> 
	{
		/// <summary>CTor</summary>
		public RegistrationEntityFactory() : base("RegistrationEntity", TournamentManager.DAL.EntityType.RegistrationEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new RegistrationEntity(fields); }
	}

	/// <summary>Factory to create new, empty RoundEntity objects.</summary>
	[Serializable]
	public partial class RoundEntityFactory : EntityFactoryBase2<RoundEntity> 
	{
		/// <summary>CTor</summary>
		public RoundEntityFactory() : base("RoundEntity", TournamentManager.DAL.EntityType.RoundEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new RoundEntity(fields); }
	}

	/// <summary>Factory to create new, empty RoundLegEntity objects.</summary>
	[Serializable]
	public partial class RoundLegEntityFactory : EntityFactoryBase2<RoundLegEntity> 
	{
		/// <summary>CTor</summary>
		public RoundLegEntityFactory() : base("RoundLegEntity", TournamentManager.DAL.EntityType.RoundLegEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new RoundLegEntity(fields); }
	}

	/// <summary>Factory to create new, empty RoundTypeEntity objects.</summary>
	[Serializable]
	public partial class RoundTypeEntityFactory : EntityFactoryBase2<RoundTypeEntity> 
	{
		/// <summary>CTor</summary>
		public RoundTypeEntityFactory() : base("RoundTypeEntity", TournamentManager.DAL.EntityType.RoundTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new RoundTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty SetEntity objects.</summary>
	[Serializable]
	public partial class SetEntityFactory : EntityFactoryBase2<SetEntity> 
	{
		/// <summary>CTor</summary>
		public SetEntityFactory() : base("SetEntity", TournamentManager.DAL.EntityType.SetEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SetEntity(fields); }
	}

	/// <summary>Factory to create new, empty SetRuleEntity objects.</summary>
	[Serializable]
	public partial class SetRuleEntityFactory : EntityFactoryBase2<SetRuleEntity> 
	{
		/// <summary>CTor</summary>
		public SetRuleEntityFactory() : base("SetRuleEntity", TournamentManager.DAL.EntityType.SetRuleEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SetRuleEntity(fields); }
	}

	/// <summary>Factory to create new, empty TeamEntity objects.</summary>
	[Serializable]
	public partial class TeamEntityFactory : EntityFactoryBase2<TeamEntity> 
	{
		/// <summary>CTor</summary>
		public TeamEntityFactory() : base("TeamEntity", TournamentManager.DAL.EntityType.TeamEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TeamEntity(fields); }
	}

	/// <summary>Factory to create new, empty TeamInRoundEntity objects.</summary>
	[Serializable]
	public partial class TeamInRoundEntityFactory : EntityFactoryBase2<TeamInRoundEntity> 
	{
		/// <summary>CTor</summary>
		public TeamInRoundEntityFactory() : base("TeamInRoundEntity", TournamentManager.DAL.EntityType.TeamInRoundEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TeamInRoundEntity(fields); }
	}

	/// <summary>Factory to create new, empty TournamentEntity objects.</summary>
	[Serializable]
	public partial class TournamentEntityFactory : EntityFactoryBase2<TournamentEntity> 
	{
		/// <summary>CTor</summary>
		public TournamentEntityFactory() : base("TournamentEntity", TournamentManager.DAL.EntityType.TournamentEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TournamentEntity(fields); }
	}

	/// <summary>Factory to create new, empty TournamentTypeEntity objects.</summary>
	[Serializable]
	public partial class TournamentTypeEntityFactory : EntityFactoryBase2<TournamentTypeEntity> 
	{
		/// <summary>CTor</summary>
		public TournamentTypeEntityFactory() : base("TournamentTypeEntity", TournamentManager.DAL.EntityType.TournamentTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TournamentTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty UserEntity objects.</summary>
	[Serializable]
	public partial class UserEntityFactory : EntityFactoryBase2<UserEntity> 
	{
		/// <summary>CTor</summary>
		public UserEntityFactory() : base("UserEntity", TournamentManager.DAL.EntityType.UserEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new UserEntity(fields); }
	}

	/// <summary>Factory to create new, empty VenueEntity objects.</summary>
	[Serializable]
	public partial class VenueEntityFactory : EntityFactoryBase2<VenueEntity> 
	{
		/// <summary>CTor</summary>
		public VenueEntityFactory() : base("VenueEntity", TournamentManager.DAL.EntityType.VenueEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new VenueEntity(fields); }
	}

	/// <summary>Factory to create new, empty Entity objects based on the entity type specified. Uses  entity specific factory objects</summary>
	[Serializable]
	public partial class GeneralEntityFactory
	{
		/// <summary>Creates a new, empty Entity object of the type specified</summary>
		/// <param name="entityTypeToCreate">The entity type to create.</param>
		/// <returns>A new, empty Entity object.</returns>
		public static IEntity2 Create(TournamentManager.DAL.EntityType entityTypeToCreate)
		{
			var factoryToUse = EntityFactoryFactory.GetFactory(entityTypeToCreate);
			IEntity2 toReturn = null;
			if(factoryToUse != null)
			{
				toReturn = factoryToUse.Create();
			}
			return toReturn;
		}		
	}
		
	/// <summary>Class which is used to obtain the entity factory based on the .NET type of the entity. </summary>
	[Serializable]
	public static class EntityFactoryFactory
	{
		private static Dictionary<Type, IEntityFactory2> _factoryPerType = new Dictionary<Type, IEntityFactory2>();

		/// <summary>Initializes the <see cref="EntityFactoryFactory"/> class.</summary>
		static EntityFactoryFactory()
		{
			foreach(int entityTypeValue in Enum.GetValues(typeof(TournamentManager.DAL.EntityType)))
			{
				var factory = GetFactory((TournamentManager.DAL.EntityType)entityTypeValue);
				_factoryPerType.Add(factory.ForEntityType ?? factory.Create().GetType(), factory);
			}
		}

		/// <summary>Gets the factory of the entity with the .NET type specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(Type typeOfEntity) { return _factoryPerType.GetValue(typeOfEntity); }

		/// <summary>Gets the factory of the entity with the TournamentManager.DAL.EntityType specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(TournamentManager.DAL.EntityType typeOfEntity)
		{
			switch(typeOfEntity)
			{
				case TournamentManager.DAL.EntityType.AvailableMatchDateEntity:
					return new AvailableMatchDateEntityFactory();
				case TournamentManager.DAL.EntityType.ExcludeMatchDateEntity:
					return new ExcludeMatchDateEntityFactory();
				case TournamentManager.DAL.EntityType.IdentityRoleEntity:
					return new IdentityRoleEntityFactory();
				case TournamentManager.DAL.EntityType.IdentityRoleClaimEntity:
					return new IdentityRoleClaimEntityFactory();
				case TournamentManager.DAL.EntityType.IdentityUserClaimEntity:
					return new IdentityUserClaimEntityFactory();
				case TournamentManager.DAL.EntityType.IdentityUserLoginEntity:
					return new IdentityUserLoginEntityFactory();
				case TournamentManager.DAL.EntityType.IdentityUserRoleEntity:
					return new IdentityUserRoleEntityFactory();
				case TournamentManager.DAL.EntityType.IdentityUserTokenEntity:
					return new IdentityUserTokenEntityFactory();
				case TournamentManager.DAL.EntityType.ManagerOfTeamEntity:
					return new ManagerOfTeamEntityFactory();
				case TournamentManager.DAL.EntityType.MatchEntity:
					return new MatchEntityFactory();
				case TournamentManager.DAL.EntityType.MatchRuleEntity:
					return new MatchRuleEntityFactory();
				case TournamentManager.DAL.EntityType.PlayerInTeamEntity:
					return new PlayerInTeamEntityFactory();
				case TournamentManager.DAL.EntityType.RankingEntity:
					return new RankingEntityFactory();
				case TournamentManager.DAL.EntityType.RegistrationEntity:
					return new RegistrationEntityFactory();
				case TournamentManager.DAL.EntityType.RoundEntity:
					return new RoundEntityFactory();
				case TournamentManager.DAL.EntityType.RoundLegEntity:
					return new RoundLegEntityFactory();
				case TournamentManager.DAL.EntityType.RoundTypeEntity:
					return new RoundTypeEntityFactory();
				case TournamentManager.DAL.EntityType.SetEntity:
					return new SetEntityFactory();
				case TournamentManager.DAL.EntityType.SetRuleEntity:
					return new SetRuleEntityFactory();
				case TournamentManager.DAL.EntityType.TeamEntity:
					return new TeamEntityFactory();
				case TournamentManager.DAL.EntityType.TeamInRoundEntity:
					return new TeamInRoundEntityFactory();
				case TournamentManager.DAL.EntityType.TournamentEntity:
					return new TournamentEntityFactory();
				case TournamentManager.DAL.EntityType.TournamentTypeEntity:
					return new TournamentTypeEntityFactory();
				case TournamentManager.DAL.EntityType.UserEntity:
					return new UserEntityFactory();
				case TournamentManager.DAL.EntityType.VenueEntity:
					return new VenueEntityFactory();
				default:
					return null;
			}
		}
	}
		
	/// <summary>Element creator for creating project elements from somewhere else, like inside Linq providers.</summary>
	public class ElementCreator : ElementCreatorBase, IElementCreator2
	{
		/// <summary>Gets the factory of the Entity type with the TournamentManager.DAL.EntityType value passed in</summary>
		/// <param name="entityTypeValue">The entity type value.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(int entityTypeValue) { return (IEntityFactory2)this.GetFactoryImpl(entityTypeValue); }
		
		/// <summary>Gets the factory of the Entity type with the .NET type passed in</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(Type typeOfEntity) { return (IEntityFactory2)this.GetFactoryImpl(typeOfEntity); }

		/// <summary>Creates a new resultset fields object with the number of field slots reserved as specified</summary>
		/// <param name="numberOfFields">The number of fields.</param>
		/// <returns>ready to use resultsetfields object</returns>
		public IEntityFields2 CreateResultsetFields(int numberOfFields) { return new ResultsetFields(numberOfFields); }
		
		/// <inheritdoc/>
		public override IInheritanceInfoProvider ObtainInheritanceInfoProviderInstance() { return ModelInfoProviderSingleton.GetInstance(); }

		/// <inheritdoc/>
		public override IEntityFieldsCore GetTypedViewFields(int typedViewTypeEnumValue) { return ModelInfoProviderSingleton.GetInstance().GetTypedViewFields(((TypedViewType)typedViewTypeEnumValue).ToString()); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand) { return new DynamicRelation(leftOperand); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, string aliasLeftOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, aliasLeftOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (TournamentManager.DAL.EntityType)Enum.Parse(typeof(TournamentManager.DAL.EntityType), rightOperandEntityName, false), aliasRightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(string leftOperandEntityName, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation((TournamentManager.DAL.EntityType)Enum.Parse(typeof(TournamentManager.DAL.EntityType), leftOperandEntityName, false), joinType, (TournamentManager.DAL.EntityType)Enum.Parse(typeof(TournamentManager.DAL.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (TournamentManager.DAL.EntityType)Enum.Parse(typeof(TournamentManager.DAL.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(int entityTypeValue) { return EntityFactoryFactory.GetFactory((TournamentManager.DAL.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(Type typeOfEntity) { return EntityFactoryFactory.GetFactory(typeOfEntity);	}

	}
}
