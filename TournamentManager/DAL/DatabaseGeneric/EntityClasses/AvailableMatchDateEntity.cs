//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'AvailableMatchDate'.<br/><br/></summary>
	[Serializable]
	public partial class AvailableMatchDateEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private TeamEntity _team;
		private VenueEntity _venue;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AvailableMatchDateEntityStaticMetaData _staticMetaData = new AvailableMatchDateEntityStaticMetaData();
		private static AvailableMatchDateRelations _relationsFactory = new AvailableMatchDateRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Team</summary>
			public static readonly string Team = "Team";
			/// <summary>Member name Venue</summary>
			public static readonly string Venue = "Venue";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AvailableMatchDateEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AvailableMatchDateEntityStaticMetaData()
			{
				SetEntityCoreInfo("AvailableMatchDateEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.AvailableMatchDateEntity, typeof(AvailableMatchDateEntity), typeof(AvailableMatchDateEntityFactory), false);
				AddNavigatorMetaData<AvailableMatchDateEntity, TeamEntity>("Team", "AvailableMatchDates", (a, b) => a._team = b, a => a._team, (a, b) => a.Team = b, TournamentManager.DAL.RelationClasses.StaticAvailableMatchDateRelations.TeamEntityUsingHomeTeamIdStatic, ()=>new AvailableMatchDateRelations().TeamEntityUsingHomeTeamId, null, new int[] { (int)AvailableMatchDateFieldIndex.HomeTeamId }, null, true, (int)TournamentManager.DAL.EntityType.TeamEntity);
				AddNavigatorMetaData<AvailableMatchDateEntity, VenueEntity>("Venue", "AvailableMatchDates", (a, b) => a._venue = b, a => a._venue, (a, b) => a.Venue = b, TournamentManager.DAL.RelationClasses.StaticAvailableMatchDateRelations.VenueEntityUsingVenueIdStatic, ()=>new AvailableMatchDateRelations().VenueEntityUsingVenueId, null, new int[] { (int)AvailableMatchDateFieldIndex.VenueId }, null, true, (int)TournamentManager.DAL.EntityType.VenueEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AvailableMatchDateEntity()
		{
		}

		/// <summary> CTor</summary>
		public AvailableMatchDateEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AvailableMatchDateEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AvailableMatchDateEntity</param>
		public AvailableMatchDateEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AvailableMatchDate which data should be fetched into this AvailableMatchDate object</param>
		public AvailableMatchDateEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for AvailableMatchDate which data should be fetched into this AvailableMatchDate object</param>
		/// <param name="validator">The custom validator object for this AvailableMatchDateEntity</param>
		public AvailableMatchDateEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AvailableMatchDateEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Team' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTeam() { return CreateRelationInfoForNavigator("Team"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Venue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoVenue() { return CreateRelationInfoForNavigator("Venue"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AvailableMatchDateEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AvailableMatchDateRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Team' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTeam { get { return _staticMetaData.GetPrefetchPathElement("Team", CommonEntityBase.CreateEntityCollection<TeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Venue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathVenue { get { return _staticMetaData.GetPrefetchPathElement("Venue", CommonEntityBase.CreateEntityCollection<VenueEntity>()); } }

		/// <summary>The Id property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)AvailableMatchDateFieldIndex.Id, true); }
			set { SetValue((int)AvailableMatchDateFieldIndex.Id, value); }		}

		/// <summary>The TournamentId property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."TournamentId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 TournamentId
		{
			get { return (System.Int64)GetValue((int)AvailableMatchDateFieldIndex.TournamentId, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.TournamentId, value); }
		}

		/// <summary>The HomeTeamId property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."HomeTeamId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 HomeTeamId
		{
			get { return (System.Int64)GetValue((int)AvailableMatchDateFieldIndex.HomeTeamId, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.HomeTeamId, value); }
		}

		/// <summary>The VenueId property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."VenueId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 VenueId
		{
			get { return (System.Int64)GetValue((int)AvailableMatchDateFieldIndex.VenueId, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.VenueId, value); }
		}

		/// <summary>The MatchStartTime property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."MatchStartTime".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime MatchStartTime
		{
			get { return (System.DateTime)GetValue((int)AvailableMatchDateFieldIndex.MatchStartTime, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.MatchStartTime, value); }
		}

		/// <summary>The MatchEndTime property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."MatchEndTime".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime MatchEndTime
		{
			get { return (System.DateTime)GetValue((int)AvailableMatchDateFieldIndex.MatchEndTime, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.MatchEndTime, value); }
		}

		/// <summary>The IsGenerated property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."IsGenerated".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsGenerated
		{
			get { return (System.Boolean)GetValue((int)AvailableMatchDateFieldIndex.IsGenerated, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.IsGenerated, value); }
		}

		/// <summary>The CreatedOn property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)AvailableMatchDateFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity AvailableMatchDate<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AvailableMatchDate"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)AvailableMatchDateFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)AvailableMatchDateFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets / sets related entity of type 'TeamEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TeamEntity Team
		{
			get { return _team; }
			set { SetSingleRelatedEntityNavigator(value, "Team"); }
		}

		/// <summary>Gets / sets related entity of type 'VenueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual VenueEntity Venue
		{
			get { return _venue; }
			set { SetSingleRelatedEntityNavigator(value, "Venue"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum AvailableMatchDateFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>TournamentId. </summary>
		TournamentId,
		///<summary>HomeTeamId. </summary>
		HomeTeamId,
		///<summary>VenueId. </summary>
		VenueId,
		///<summary>MatchStartTime. </summary>
		MatchStartTime,
		///<summary>MatchEndTime. </summary>
		MatchEndTime,
		///<summary>IsGenerated. </summary>
		IsGenerated,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AvailableMatchDate. </summary>
	public partial class AvailableMatchDateRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between AvailableMatchDateEntity and TeamEntity over the m:1 relation they have, using the relation between the fields: AvailableMatchDate.HomeTeamId - Team.Id</summary>
		public virtual IEntityRelation TeamEntityUsingHomeTeamId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Team", false, new[] { TeamFields.Id, AvailableMatchDateFields.HomeTeamId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AvailableMatchDateEntity and VenueEntity over the m:1 relation they have, using the relation between the fields: AvailableMatchDate.VenueId - Venue.Id</summary>
		public virtual IEntityRelation VenueEntityUsingVenueId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Venue", false, new[] { VenueFields.Id, AvailableMatchDateFields.VenueId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAvailableMatchDateRelations
	{
		internal static readonly IEntityRelation TeamEntityUsingHomeTeamIdStatic = new AvailableMatchDateRelations().TeamEntityUsingHomeTeamId;
		internal static readonly IEntityRelation VenueEntityUsingVenueIdStatic = new AvailableMatchDateRelations().VenueEntityUsingVenueId;

		/// <summary>CTor</summary>
		static StaticAvailableMatchDateRelations() { }
	}
}
