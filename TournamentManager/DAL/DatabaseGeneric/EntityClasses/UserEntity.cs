//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'User'.<br/><br/></summary>
	[Serializable]
	public partial class UserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<IdentityUserClaimEntity> _identityUserClaims;
		private EntityCollection<IdentityUserLoginEntity> _identityUserLogins;
		private EntityCollection<IdentityUserRoleEntity> _identityUserRoles;
		private EntityCollection<IdentityUserTokenEntity> _identityUserTokens;
		private EntityCollection<ManagerOfTeamEntity> _managerOfTeams;
		private EntityCollection<PlayerInTeamEntity> _playerInTeams;
		private EntityCollection<RegistrationEntity> _registrations;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static Dictionary<string, Dictionary<string, string>>	_fieldsCustomProperties;
		private static UserEntityStaticMetaData _staticMetaData = new UserEntityStaticMetaData();
		private static UserRelations _relationsFactory = new UserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name IdentityUserClaims</summary>
			public static readonly string IdentityUserClaims = "IdentityUserClaims";
			/// <summary>Member name IdentityUserLogins</summary>
			public static readonly string IdentityUserLogins = "IdentityUserLogins";
			/// <summary>Member name IdentityUserRoles</summary>
			public static readonly string IdentityUserRoles = "IdentityUserRoles";
			/// <summary>Member name IdentityUserTokens</summary>
			public static readonly string IdentityUserTokens = "IdentityUserTokens";
			/// <summary>Member name ManagerOfTeams</summary>
			public static readonly string ManagerOfTeams = "ManagerOfTeams";
			/// <summary>Member name PlayerInTeams</summary>
			public static readonly string PlayerInTeams = "PlayerInTeams";
			/// <summary>Member name Registrations</summary>
			public static readonly string Registrations = "Registrations";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.UserEntity, typeof(UserEntity), typeof(UserEntityFactory), false);
				AddNavigatorMetaData<UserEntity, EntityCollection<IdentityUserClaimEntity>>("IdentityUserClaims", a => a._identityUserClaims, (a, b) => a._identityUserClaims = b, a => a.IdentityUserClaims, () => new UserRelations().IdentityUserClaimEntityUsingUserId, typeof(IdentityUserClaimEntity), (int)TournamentManager.DAL.EntityType.IdentityUserClaimEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<IdentityUserLoginEntity>>("IdentityUserLogins", a => a._identityUserLogins, (a, b) => a._identityUserLogins = b, a => a.IdentityUserLogins, () => new UserRelations().IdentityUserLoginEntityUsingUserId, typeof(IdentityUserLoginEntity), (int)TournamentManager.DAL.EntityType.IdentityUserLoginEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<IdentityUserRoleEntity>>("IdentityUserRoles", a => a._identityUserRoles, (a, b) => a._identityUserRoles = b, a => a.IdentityUserRoles, () => new UserRelations().IdentityUserRoleEntityUsingUserId, typeof(IdentityUserRoleEntity), (int)TournamentManager.DAL.EntityType.IdentityUserRoleEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<IdentityUserTokenEntity>>("IdentityUserTokens", a => a._identityUserTokens, (a, b) => a._identityUserTokens = b, a => a.IdentityUserTokens, () => new UserRelations().IdentityUserTokenEntityUsingUserId, typeof(IdentityUserTokenEntity), (int)TournamentManager.DAL.EntityType.IdentityUserTokenEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ManagerOfTeamEntity>>("ManagerOfTeams", a => a._managerOfTeams, (a, b) => a._managerOfTeams = b, a => a.ManagerOfTeams, () => new UserRelations().ManagerOfTeamEntityUsingUserId, typeof(ManagerOfTeamEntity), (int)TournamentManager.DAL.EntityType.ManagerOfTeamEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<PlayerInTeamEntity>>("PlayerInTeams", a => a._playerInTeams, (a, b) => a._playerInTeams = b, a => a.PlayerInTeams, () => new UserRelations().PlayerInTeamEntityUsingUserId, typeof(PlayerInTeamEntity), (int)TournamentManager.DAL.EntityType.PlayerInTeamEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<RegistrationEntity>>("Registrations", a => a._registrations, (a, b) => a._registrations = b, a => a.Registrations, () => new UserRelations().RegistrationEntityUsingManagerId, typeof(RegistrationEntity), (int)TournamentManager.DAL.EntityType.RegistrationEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserEntity()
		{
			SetupCustomPropertyHashtables();
		}

		/// <summary> CTor</summary>
		public UserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		public UserEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Method which will construct a filter (predicate expression) for the unique constraint defined on the fields: Email .</summary>
		/// <returns>true if succeeded and the contents is read, false otherwise</returns>
		public IPredicateExpression ConstructFilterForUCEmail()
		{
			var filter = new PredicateExpression();
			filter.Add(TournamentManager.DAL.HelperClasses.UserFields.Email == this.Fields.GetCurrentValue((int)UserFieldIndex.Email));
 			return filter;
		}

		/// <summary>Method which will construct a filter (predicate expression) for the unique constraint defined on the fields: UserName .</summary>
		/// <returns>true if succeeded and the contents is read, false otherwise</returns>
		public IPredicateExpression ConstructFilterForUCUserName()
		{
			var filter = new PredicateExpression();
			filter.Add(TournamentManager.DAL.HelperClasses.UserFields.UserName == this.Fields.GetCurrentValue((int)UserFieldIndex.UserName));
 			return filter;
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'IdentityUserClaim' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIdentityUserClaims() { return CreateRelationInfoForNavigator("IdentityUserClaims"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'IdentityUserLogin' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIdentityUserLogins() { return CreateRelationInfoForNavigator("IdentityUserLogins"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'IdentityUserRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIdentityUserRoles() { return CreateRelationInfoForNavigator("IdentityUserRoles"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'IdentityUserToken' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIdentityUserTokens() { return CreateRelationInfoForNavigator("IdentityUserTokens"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ManagerOfTeam' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoManagerOfTeams() { return CreateRelationInfoForNavigator("ManagerOfTeams"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'PlayerInTeam' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPlayerInTeams() { return CreateRelationInfoForNavigator("PlayerInTeams"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Registration' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRegistrations() { return CreateRelationInfoForNavigator("Registrations"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the hashtables for the entity type and entity field custom properties. </summary>
		private static void SetupCustomPropertyHashtables()
		{
			_fieldsCustomProperties = new Dictionary<string, Dictionary<string, string>>();
			Dictionary<string, string> fieldHashtable;
			fieldHashtable = new Dictionary<string, string>();
			fieldHashtable.Add("MaxInputLength", @"20");
			_fieldsCustomProperties.Add("PasswordHash", fieldHashtable);
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'IdentityUserClaim' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIdentityUserClaims { get { return _staticMetaData.GetPrefetchPathElement("IdentityUserClaims", CommonEntityBase.CreateEntityCollection<IdentityUserClaimEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'IdentityUserLogin' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIdentityUserLogins { get { return _staticMetaData.GetPrefetchPathElement("IdentityUserLogins", CommonEntityBase.CreateEntityCollection<IdentityUserLoginEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'IdentityUserRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIdentityUserRoles { get { return _staticMetaData.GetPrefetchPathElement("IdentityUserRoles", CommonEntityBase.CreateEntityCollection<IdentityUserRoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'IdentityUserToken' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIdentityUserTokens { get { return _staticMetaData.GetPrefetchPathElement("IdentityUserTokens", CommonEntityBase.CreateEntityCollection<IdentityUserTokenEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ManagerOfTeam' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathManagerOfTeams { get { return _staticMetaData.GetPrefetchPathElement("ManagerOfTeams", CommonEntityBase.CreateEntityCollection<ManagerOfTeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PlayerInTeam' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPlayerInTeams { get { return _staticMetaData.GetPrefetchPathElement("PlayerInTeams", CommonEntityBase.CreateEntityCollection<PlayerInTeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Registration' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRegistrations { get { return _staticMetaData.GetPrefetchPathElement("Registrations", CommonEntityBase.CreateEntityCollection<RegistrationEntity>()); } }

		/// <summary>The custom properties for the fields of this entity type. The returned Hashtable contains per fieldname a hashtable of name-value pairs. </summary>
		/// <remarks>The data returned from this property should be considered read-only: it is not thread safe to alter this data at runtime.</remarks>
		public  static Dictionary<string, Dictionary<string, string>> FieldsCustomProperties { get { return _fieldsCustomProperties;} }

		/// <inheritdoc/>
		[Browsable(false), XmlIgnore]
		protected override Dictionary<string, Dictionary<string, string>> FieldsCustomPropertiesOfType { get { return FieldsCustomProperties;} }

		/// <summary>The Id property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)UserFieldIndex.Id, true); }
			set { SetValue((int)UserFieldIndex.Id, value); }		}

		/// <summary>The Guid property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Guid".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Guid
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Guid, true); }
			set	{ SetValue((int)UserFieldIndex.Guid, value); }
		}

		/// <summary>The UserName property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."UserName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String UserName
		{
			get { return (System.String)GetValue((int)UserFieldIndex.UserName, true); }
			set	{ SetValue((int)UserFieldIndex.UserName, value); }
		}

		/// <summary>The PasswordHash property of the Entity User<br/><br/>MaxInputLength: 20<br/></summary>
		/// <remarks>Mapped on  table field: "User"."PasswordHash".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String PasswordHash
		{
			get { return (System.String)GetValue((int)UserFieldIndex.PasswordHash, true); }
			set	{ SetValue((int)UserFieldIndex.PasswordHash, value); }
		}

		/// <summary>The Email property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Email".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Email
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Email, true); }
			set	{ SetValue((int)UserFieldIndex.Email, value); }
		}

		/// <summary>The EmailConfirmedOn property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."EmailConfirmedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> EmailConfirmedOn
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.EmailConfirmedOn, false); }
			set	{ SetValue((int)UserFieldIndex.EmailConfirmedOn, value); }
		}

		/// <summary>The PhoneNumber property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."PhoneNumber".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String PhoneNumber
		{
			get { return (System.String)GetValue((int)UserFieldIndex.PhoneNumber, true); }
			set	{ SetValue((int)UserFieldIndex.PhoneNumber, value); }
		}

		/// <summary>The PhoneNumberConfirmedOn property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."PhoneNumberConfirmedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> PhoneNumberConfirmedOn
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.PhoneNumberConfirmedOn, false); }
			set	{ SetValue((int)UserFieldIndex.PhoneNumberConfirmedOn, value); }
		}

		/// <summary>The LastLoginOn property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LastLoginOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> LastLoginOn
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.LastLoginOn, false); }
			set	{ SetValue((int)UserFieldIndex.LastLoginOn, value); }
		}

		/// <summary>The AccessFailedCount property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."AccessFailedCount".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 AccessFailedCount
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.AccessFailedCount, true); }
			set	{ SetValue((int)UserFieldIndex.AccessFailedCount, value); }
		}

		/// <summary>The LockoutEndDateUtc property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LockoutEndDateUtc".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> LockoutEndDateUtc
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.LockoutEndDateUtc, false); }
			set	{ SetValue((int)UserFieldIndex.LockoutEndDateUtc, value); }
		}

		/// <summary>The Gender property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Gender".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 1.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Gender
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Gender, true); }
			set	{ SetValue((int)UserFieldIndex.Gender, value); }
		}

		/// <summary>The Title property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Title".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Title
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Title, true); }
			set	{ SetValue((int)UserFieldIndex.Title, value); }
		}

		/// <summary>The FirstName property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."FirstName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FirstName
		{
			get { return (System.String)GetValue((int)UserFieldIndex.FirstName, true); }
			set	{ SetValue((int)UserFieldIndex.FirstName, value); }
		}

		/// <summary>The MiddleName property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."MiddleName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String MiddleName
		{
			get { return (System.String)GetValue((int)UserFieldIndex.MiddleName, true); }
			set	{ SetValue((int)UserFieldIndex.MiddleName, value); }
		}

		/// <summary>The LastName property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LastName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)UserFieldIndex.LastName, true); }
			set	{ SetValue((int)UserFieldIndex.LastName, value); }
		}

		/// <summary>The Nickname property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Nickname".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Nickname
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Nickname, true); }
			set	{ SetValue((int)UserFieldIndex.Nickname, value); }
		}

		/// <summary>The PhoneNumber2 property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."PhoneNumber2".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 40.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String PhoneNumber2
		{
			get { return (System.String)GetValue((int)UserFieldIndex.PhoneNumber2, true); }
			set	{ SetValue((int)UserFieldIndex.PhoneNumber2, value); }
		}

		/// <summary>The Email2 property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Email2".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Email2
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Email2, true); }
			set	{ SetValue((int)UserFieldIndex.Email2, value); }
		}

		/// <summary>The Birthday property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Birthday".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> Birthday
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.Birthday, false); }
			set	{ SetValue((int)UserFieldIndex.Birthday, value); }
		}

		/// <summary>The Remarks property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Remarks".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 4000.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Remarks
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Remarks, true); }
			set	{ SetValue((int)UserFieldIndex.Remarks, value); }
		}

		/// <summary>The CreatedOn property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)UserFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)UserFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'IdentityUserClaimEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IdentityUserClaimEntity))]
		public virtual EntityCollection<IdentityUserClaimEntity> IdentityUserClaims { get { return GetOrCreateEntityCollection<IdentityUserClaimEntity, IdentityUserClaimEntityFactory>("User", true, false, ref _identityUserClaims); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'IdentityUserLoginEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IdentityUserLoginEntity))]
		public virtual EntityCollection<IdentityUserLoginEntity> IdentityUserLogins { get { return GetOrCreateEntityCollection<IdentityUserLoginEntity, IdentityUserLoginEntityFactory>("User", true, false, ref _identityUserLogins); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'IdentityUserRoleEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IdentityUserRoleEntity))]
		public virtual EntityCollection<IdentityUserRoleEntity> IdentityUserRoles { get { return GetOrCreateEntityCollection<IdentityUserRoleEntity, IdentityUserRoleEntityFactory>("User", true, false, ref _identityUserRoles); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'IdentityUserTokenEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IdentityUserTokenEntity))]
		public virtual EntityCollection<IdentityUserTokenEntity> IdentityUserTokens { get { return GetOrCreateEntityCollection<IdentityUserTokenEntity, IdentityUserTokenEntityFactory>("User", true, false, ref _identityUserTokens); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ManagerOfTeamEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ManagerOfTeamEntity))]
		public virtual EntityCollection<ManagerOfTeamEntity> ManagerOfTeams { get { return GetOrCreateEntityCollection<ManagerOfTeamEntity, ManagerOfTeamEntityFactory>("User", true, false, ref _managerOfTeams); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'PlayerInTeamEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PlayerInTeamEntity))]
		public virtual EntityCollection<PlayerInTeamEntity> PlayerInTeams { get { return GetOrCreateEntityCollection<PlayerInTeamEntity, PlayerInTeamEntityFactory>("User", true, false, ref _playerInTeams); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RegistrationEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RegistrationEntity))]
		public virtual EntityCollection<RegistrationEntity> Registrations { get { return GetOrCreateEntityCollection<RegistrationEntity, RegistrationEntityFactory>("User", true, false, ref _registrations); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum UserFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>Guid. </summary>
		Guid,
		///<summary>UserName. </summary>
		UserName,
		///<summary>PasswordHash. </summary>
		PasswordHash,
		///<summary>Email. </summary>
		Email,
		///<summary>EmailConfirmedOn. </summary>
		EmailConfirmedOn,
		///<summary>PhoneNumber. </summary>
		PhoneNumber,
		///<summary>PhoneNumberConfirmedOn. </summary>
		PhoneNumberConfirmedOn,
		///<summary>LastLoginOn. </summary>
		LastLoginOn,
		///<summary>AccessFailedCount. </summary>
		AccessFailedCount,
		///<summary>LockoutEndDateUtc. </summary>
		LockoutEndDateUtc,
		///<summary>Gender. </summary>
		Gender,
		///<summary>Title. </summary>
		Title,
		///<summary>FirstName. </summary>
		FirstName,
		///<summary>MiddleName. </summary>
		MiddleName,
		///<summary>LastName. </summary>
		LastName,
		///<summary>Nickname. </summary>
		Nickname,
		///<summary>PhoneNumber2. </summary>
		PhoneNumber2,
		///<summary>Email2. </summary>
		Email2,
		///<summary>Birthday. </summary>
		Birthday,
		///<summary>Remarks. </summary>
		Remarks,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: User. </summary>
	public partial class UserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UserEntity and IdentityUserClaimEntity over the 1:n relation they have, using the relation between the fields: User.Id - IdentityUserClaim.UserId</summary>
		public virtual IEntityRelation IdentityUserClaimEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "IdentityUserClaims", true, new[] { UserFields.Id, IdentityUserClaimFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and IdentityUserLoginEntity over the 1:n relation they have, using the relation between the fields: User.Id - IdentityUserLogin.UserId</summary>
		public virtual IEntityRelation IdentityUserLoginEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "IdentityUserLogins", true, new[] { UserFields.Id, IdentityUserLoginFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and IdentityUserRoleEntity over the 1:n relation they have, using the relation between the fields: User.Id - IdentityUserRole.UserId</summary>
		public virtual IEntityRelation IdentityUserRoleEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "IdentityUserRoles", true, new[] { UserFields.Id, IdentityUserRoleFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and IdentityUserTokenEntity over the 1:n relation they have, using the relation between the fields: User.Id - IdentityUserToken.UserId</summary>
		public virtual IEntityRelation IdentityUserTokenEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "IdentityUserTokens", true, new[] { UserFields.Id, IdentityUserTokenFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ManagerOfTeamEntity over the 1:n relation they have, using the relation between the fields: User.Id - ManagerOfTeam.UserId</summary>
		public virtual IEntityRelation ManagerOfTeamEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ManagerOfTeams", true, new[] { UserFields.Id, ManagerOfTeamFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and PlayerInTeamEntity over the 1:n relation they have, using the relation between the fields: User.Id - PlayerInTeam.UserId</summary>
		public virtual IEntityRelation PlayerInTeamEntityUsingUserId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PlayerInTeams", true, new[] { UserFields.Id, PlayerInTeamFields.UserId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and RegistrationEntity over the 1:n relation they have, using the relation between the fields: User.Id - Registration.ManagerId</summary>
		public virtual IEntityRelation RegistrationEntityUsingManagerId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Registrations", true, new[] { UserFields.Id, RegistrationFields.ManagerId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserRelations
	{
		internal static readonly IEntityRelation IdentityUserClaimEntityUsingUserIdStatic = new UserRelations().IdentityUserClaimEntityUsingUserId;
		internal static readonly IEntityRelation IdentityUserLoginEntityUsingUserIdStatic = new UserRelations().IdentityUserLoginEntityUsingUserId;
		internal static readonly IEntityRelation IdentityUserRoleEntityUsingUserIdStatic = new UserRelations().IdentityUserRoleEntityUsingUserId;
		internal static readonly IEntityRelation IdentityUserTokenEntityUsingUserIdStatic = new UserRelations().IdentityUserTokenEntityUsingUserId;
		internal static readonly IEntityRelation ManagerOfTeamEntityUsingUserIdStatic = new UserRelations().ManagerOfTeamEntityUsingUserId;
		internal static readonly IEntityRelation PlayerInTeamEntityUsingUserIdStatic = new UserRelations().PlayerInTeamEntityUsingUserId;
		internal static readonly IEntityRelation RegistrationEntityUsingManagerIdStatic = new UserRelations().RegistrationEntityUsingManagerId;

		/// <summary>CTor</summary>
		static StaticUserRelations() { }
	}
}
