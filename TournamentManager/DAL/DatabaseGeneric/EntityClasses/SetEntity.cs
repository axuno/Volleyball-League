//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Set'.<br/><br/></summary>
	[Serializable]
	public partial class SetEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private MatchEntity _match;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static SetEntityStaticMetaData _staticMetaData = new SetEntityStaticMetaData();
		private static SetRelations _relationsFactory = new SetRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Match</summary>
			public static readonly string Match = "Match";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SetEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public SetEntityStaticMetaData()
			{
				SetEntityCoreInfo("SetEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.SetEntity, typeof(SetEntity), typeof(SetEntityFactory), false);
				AddNavigatorMetaData<SetEntity, MatchEntity>("Match", "Sets", (a, b) => a._match = b, a => a._match, (a, b) => a.Match = b, TournamentManager.DAL.RelationClasses.StaticSetRelations.MatchEntityUsingMatchIdStatic, ()=>new SetRelations().MatchEntityUsingMatchId, null, new int[] { (int)SetFieldIndex.MatchId }, null, true, (int)TournamentManager.DAL.EntityType.MatchEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SetEntity()
		{
		}

		/// <summary> CTor</summary>
		public SetEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SetEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SetEntity</param>
		public SetEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Set which data should be fetched into this Set object</param>
		public SetEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Set which data should be fetched into this Set object</param>
		/// <param name="validator">The custom validator object for this SetEntity</param>
		public SetEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SetEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Match' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMatch() { return CreateRelationInfoForNavigator("Match"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this SetEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static SetRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Match' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMatch { get { return _staticMetaData.GetPrefetchPathElement("Match", CommonEntityBase.CreateEntityCollection<MatchEntity>()); } }

		/// <summary>The Id property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)SetFieldIndex.Id, true); }
			set { SetValue((int)SetFieldIndex.Id, value); }		}

		/// <summary>The MatchId property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."MatchId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 MatchId
		{
			get { return (System.Int64)GetValue((int)SetFieldIndex.MatchId, true); }
			set	{ SetValue((int)SetFieldIndex.MatchId, value); }
		}

		/// <summary>The SequenceNo property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."SequenceNo".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 SequenceNo
		{
			get { return (System.Int32)GetValue((int)SetFieldIndex.SequenceNo, true); }
			set	{ SetValue((int)SetFieldIndex.SequenceNo, value); }
		}

		/// <summary>The HomeBallPoints property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."HomeBallPoints".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 HomeBallPoints
		{
			get { return (System.Int32)GetValue((int)SetFieldIndex.HomeBallPoints, true); }
			set	{ SetValue((int)SetFieldIndex.HomeBallPoints, value); }
		}

		/// <summary>The GuestBallPoints property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."GuestBallPoints".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 GuestBallPoints
		{
			get { return (System.Int32)GetValue((int)SetFieldIndex.GuestBallPoints, true); }
			set	{ SetValue((int)SetFieldIndex.GuestBallPoints, value); }
		}

		/// <summary>The HomeSetPoints property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."HomeSetPoints".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 HomeSetPoints
		{
			get { return (System.Int32)GetValue((int)SetFieldIndex.HomeSetPoints, true); }
			set	{ SetValue((int)SetFieldIndex.HomeSetPoints, value); }
		}

		/// <summary>The GuestSetPoints property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."GuestSetPoints".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 GuestSetPoints
		{
			get { return (System.Int32)GetValue((int)SetFieldIndex.GuestSetPoints, true); }
			set	{ SetValue((int)SetFieldIndex.GuestSetPoints, value); }
		}

		/// <summary>The HomeTimeout property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."HomeTimeout".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 HomeTimeout
		{
			get { return (System.Int32)GetValue((int)SetFieldIndex.HomeTimeout, true); }
			set	{ SetValue((int)SetFieldIndex.HomeTimeout, value); }
		}

		/// <summary>The GuestTimeout property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."GuestTimeout".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 GuestTimeout
		{
			get { return (System.Int32)GetValue((int)SetFieldIndex.GuestTimeout, true); }
			set	{ SetValue((int)SetFieldIndex.GuestTimeout, value); }
		}

		/// <summary>The IsOverruled property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."IsOverruled".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsOverruled
		{
			get { return (System.Boolean)GetValue((int)SetFieldIndex.IsOverruled, true); }
			set	{ SetValue((int)SetFieldIndex.IsOverruled, value); }
		}

		/// <summary>The IsTieBreak property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."IsTieBreak".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsTieBreak
		{
			get { return (System.Boolean)GetValue((int)SetFieldIndex.IsTieBreak, true); }
			set	{ SetValue((int)SetFieldIndex.IsTieBreak, value); }
		}

		/// <summary>The RealStart property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."RealStart".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> RealStart
		{
			get { return (Nullable<System.DateTime>)GetValue((int)SetFieldIndex.RealStart, false); }
			set	{ SetValue((int)SetFieldIndex.RealStart, value); }
		}

		/// <summary>The RealEnd property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."RealEnd".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> RealEnd
		{
			get { return (Nullable<System.DateTime>)GetValue((int)SetFieldIndex.RealEnd, false); }
			set	{ SetValue((int)SetFieldIndex.RealEnd, value); }
		}

		/// <summary>The Remarks property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."Remarks".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Remarks
		{
			get { return (System.String)GetValue((int)SetFieldIndex.Remarks, true); }
			set	{ SetValue((int)SetFieldIndex.Remarks, value); }
		}

		/// <summary>The CreatedOn property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)SetFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)SetFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity Set<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Set"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)SetFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)SetFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets / sets related entity of type 'MatchEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual MatchEntity Match
		{
			get { return _match; }
			set { SetSingleRelatedEntityNavigator(value, "Match"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum SetFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>MatchId. </summary>
		MatchId,
		///<summary>SequenceNo. </summary>
		SequenceNo,
		///<summary>HomeBallPoints. </summary>
		HomeBallPoints,
		///<summary>GuestBallPoints. </summary>
		GuestBallPoints,
		///<summary>HomeSetPoints. </summary>
		HomeSetPoints,
		///<summary>GuestSetPoints. </summary>
		GuestSetPoints,
		///<summary>HomeTimeout. </summary>
		HomeTimeout,
		///<summary>GuestTimeout. </summary>
		GuestTimeout,
		///<summary>IsOverruled. </summary>
		IsOverruled,
		///<summary>IsTieBreak. </summary>
		IsTieBreak,
		///<summary>RealStart. </summary>
		RealStart,
		///<summary>RealEnd. </summary>
		RealEnd,
		///<summary>Remarks. </summary>
		Remarks,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Set. </summary>
	public partial class SetRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between SetEntity and MatchEntity over the m:1 relation they have, using the relation between the fields: Set.MatchId - Match.Id</summary>
		public virtual IEntityRelation MatchEntityUsingMatchId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Match", false, new[] { MatchFields.Id, SetFields.MatchId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSetRelations
	{
		internal static readonly IEntityRelation MatchEntityUsingMatchIdStatic = new SetRelations().MatchEntityUsingMatchId;

		/// <summary>CTor</summary>
		static StaticSetRelations() { }
	}
}
