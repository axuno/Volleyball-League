//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Match'.<br/><br/></summary>
	[Serializable]
	public partial class MatchEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<SetEntity> _sets;
		private RoundEntity _round;
		private TeamEntity _guestTeam;
		private TeamEntity _homeTeam;
		private TeamEntity _refereeTeam;
		private VenueEntity _origVenue;
		private VenueEntity _venue;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static MatchEntityStaticMetaData _staticMetaData = new MatchEntityStaticMetaData();
		private static MatchRelations _relationsFactory = new MatchRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Round</summary>
			public static readonly string Round = "Round";
			/// <summary>Member name GuestTeam</summary>
			public static readonly string GuestTeam = "GuestTeam";
			/// <summary>Member name HomeTeam</summary>
			public static readonly string HomeTeam = "HomeTeam";
			/// <summary>Member name RefereeTeam</summary>
			public static readonly string RefereeTeam = "RefereeTeam";
			/// <summary>Member name OrigVenue</summary>
			public static readonly string OrigVenue = "OrigVenue";
			/// <summary>Member name Venue</summary>
			public static readonly string Venue = "Venue";
			/// <summary>Member name Sets</summary>
			public static readonly string Sets = "Sets";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class MatchEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public MatchEntityStaticMetaData()
			{
				SetEntityCoreInfo("MatchEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.MatchEntity, typeof(MatchEntity), typeof(MatchEntityFactory), false);
				AddNavigatorMetaData<MatchEntity, EntityCollection<SetEntity>>("Sets", a => a._sets, (a, b) => a._sets = b, a => a.Sets, () => new MatchRelations().SetEntityUsingMatchId, typeof(SetEntity), (int)TournamentManager.DAL.EntityType.SetEntity);
				AddNavigatorMetaData<MatchEntity, RoundEntity>("Round", "Matches", (a, b) => a._round = b, a => a._round, (a, b) => a.Round = b, TournamentManager.DAL.RelationClasses.StaticMatchRelations.RoundEntityUsingRoundIdStatic, ()=>new MatchRelations().RoundEntityUsingRoundId, null, new int[] { (int)MatchFieldIndex.RoundId }, null, true, (int)TournamentManager.DAL.EntityType.RoundEntity);
				AddNavigatorMetaData<MatchEntity, TeamEntity>("GuestTeam", "MatchGuestTeam", (a, b) => a._guestTeam = b, a => a._guestTeam, (a, b) => a.GuestTeam = b, TournamentManager.DAL.RelationClasses.StaticMatchRelations.TeamEntityUsingGuestTeamIdStatic, ()=>new MatchRelations().TeamEntityUsingGuestTeamId, null, new int[] { (int)MatchFieldIndex.GuestTeamId }, null, true, (int)TournamentManager.DAL.EntityType.TeamEntity);
				AddNavigatorMetaData<MatchEntity, TeamEntity>("HomeTeam", "MatchHomeTeam", (a, b) => a._homeTeam = b, a => a._homeTeam, (a, b) => a.HomeTeam = b, TournamentManager.DAL.RelationClasses.StaticMatchRelations.TeamEntityUsingHomeTeamIdStatic, ()=>new MatchRelations().TeamEntityUsingHomeTeamId, null, new int[] { (int)MatchFieldIndex.HomeTeamId }, null, true, (int)TournamentManager.DAL.EntityType.TeamEntity);
				AddNavigatorMetaData<MatchEntity, TeamEntity>("RefereeTeam", "MatchReferee", (a, b) => a._refereeTeam = b, a => a._refereeTeam, (a, b) => a.RefereeTeam = b, TournamentManager.DAL.RelationClasses.StaticMatchRelations.TeamEntityUsingRefereeIdStatic, ()=>new MatchRelations().TeamEntityUsingRefereeId, null, new int[] { (int)MatchFieldIndex.RefereeId }, null, true, (int)TournamentManager.DAL.EntityType.TeamEntity);
				AddNavigatorMetaData<MatchEntity, VenueEntity>("OrigVenue", "OrigVenueMatches", (a, b) => a._origVenue = b, a => a._origVenue, (a, b) => a.OrigVenue = b, TournamentManager.DAL.RelationClasses.StaticMatchRelations.VenueEntityUsingOrigVenueIdStatic, ()=>new MatchRelations().VenueEntityUsingOrigVenueId, null, new int[] { (int)MatchFieldIndex.OrigVenueId }, null, true, (int)TournamentManager.DAL.EntityType.VenueEntity);
				AddNavigatorMetaData<MatchEntity, VenueEntity>("Venue", "CurrentVenueMatches", (a, b) => a._venue = b, a => a._venue, (a, b) => a.Venue = b, TournamentManager.DAL.RelationClasses.StaticMatchRelations.VenueEntityUsingVenueIdStatic, ()=>new MatchRelations().VenueEntityUsingVenueId, null, new int[] { (int)MatchFieldIndex.VenueId }, null, true, (int)TournamentManager.DAL.EntityType.VenueEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static MatchEntity()
		{
		}

		/// <summary> CTor</summary>
		public MatchEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public MatchEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this MatchEntity</param>
		public MatchEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Match which data should be fetched into this Match object</param>
		public MatchEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Match which data should be fetched into this Match object</param>
		/// <param name="validator">The custom validator object for this MatchEntity</param>
		public MatchEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected MatchEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Set' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSets() { return CreateRelationInfoForNavigator("Sets"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Round' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRound() { return CreateRelationInfoForNavigator("Round"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Team' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoGuestTeam() { return CreateRelationInfoForNavigator("GuestTeam"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Team' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoHomeTeam() { return CreateRelationInfoForNavigator("HomeTeam"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Team' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRefereeTeam() { return CreateRelationInfoForNavigator("RefereeTeam"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Venue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoOrigVenue() { return CreateRelationInfoForNavigator("OrigVenue"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Venue' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoVenue() { return CreateRelationInfoForNavigator("Venue"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this MatchEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static MatchRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Set' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSets { get { return _staticMetaData.GetPrefetchPathElement("Sets", CommonEntityBase.CreateEntityCollection<SetEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Round' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRound { get { return _staticMetaData.GetPrefetchPathElement("Round", CommonEntityBase.CreateEntityCollection<RoundEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Team' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathGuestTeam { get { return _staticMetaData.GetPrefetchPathElement("GuestTeam", CommonEntityBase.CreateEntityCollection<TeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Team' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathHomeTeam { get { return _staticMetaData.GetPrefetchPathElement("HomeTeam", CommonEntityBase.CreateEntityCollection<TeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Team' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRefereeTeam { get { return _staticMetaData.GetPrefetchPathElement("RefereeTeam", CommonEntityBase.CreateEntityCollection<TeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Venue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathOrigVenue { get { return _staticMetaData.GetPrefetchPathElement("OrigVenue", CommonEntityBase.CreateEntityCollection<VenueEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Venue' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathVenue { get { return _staticMetaData.GetPrefetchPathElement("Venue", CommonEntityBase.CreateEntityCollection<VenueEntity>()); } }

		/// <summary>The Id property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)MatchFieldIndex.Id, true); }
			set { SetValue((int)MatchFieldIndex.Id, value); }		}

		/// <summary>The HomeTeamId property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."HomeTeamId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 HomeTeamId
		{
			get { return (System.Int64)GetValue((int)MatchFieldIndex.HomeTeamId, true); }
			set	{ SetValue((int)MatchFieldIndex.HomeTeamId, value); }
		}

		/// <summary>The GuestTeamId property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."GuestTeamId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 GuestTeamId
		{
			get { return (System.Int64)GetValue((int)MatchFieldIndex.GuestTeamId, true); }
			set	{ SetValue((int)MatchFieldIndex.GuestTeamId, value); }
		}

		/// <summary>The RefereeId property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."RefereeId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> RefereeId
		{
			get { return (Nullable<System.Int64>)GetValue((int)MatchFieldIndex.RefereeId, false); }
			set	{ SetValue((int)MatchFieldIndex.RefereeId, value); }
		}

		/// <summary>The RoundId property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."RoundId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 RoundId
		{
			get { return (System.Int64)GetValue((int)MatchFieldIndex.RoundId, true); }
			set	{ SetValue((int)MatchFieldIndex.RoundId, value); }
		}

		/// <summary>The VenueId property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."VenueId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> VenueId
		{
			get { return (Nullable<System.Int64>)GetValue((int)MatchFieldIndex.VenueId, false); }
			set	{ SetValue((int)MatchFieldIndex.VenueId, value); }
		}

		/// <summary>The OrigVenueId property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."OrigVenueId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> OrigVenueId
		{
			get { return (Nullable<System.Int64>)GetValue((int)MatchFieldIndex.OrigVenueId, false); }
			set	{ SetValue((int)MatchFieldIndex.OrigVenueId, value); }
		}

		/// <summary>The LegSequenceNo property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."LegSequenceNo".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> LegSequenceNo
		{
			get { return (Nullable<System.Int32>)GetValue((int)MatchFieldIndex.LegSequenceNo, false); }
			set	{ SetValue((int)MatchFieldIndex.LegSequenceNo, value); }
		}

		/// <summary>The HomePoints property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."HomePoints".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> HomePoints
		{
			get { return (Nullable<System.Int32>)GetValue((int)MatchFieldIndex.HomePoints, false); }
			set	{ SetValue((int)MatchFieldIndex.HomePoints, value); }
		}

		/// <summary>The GuestPoints property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."GuestPoints".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> GuestPoints
		{
			get { return (Nullable<System.Int32>)GetValue((int)MatchFieldIndex.GuestPoints, false); }
			set	{ SetValue((int)MatchFieldIndex.GuestPoints, value); }
		}

		/// <summary>The IsComplete property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."IsComplete".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsComplete
		{
			get { return (System.Boolean)GetValue((int)MatchFieldIndex.IsComplete, true); }
			set	{ SetValue((int)MatchFieldIndex.IsComplete, value); }
		}

		/// <summary>The IsOverruled property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."IsOverruled".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsOverruled
		{
			get { return (System.Boolean)GetValue((int)MatchFieldIndex.IsOverruled, true); }
			set	{ SetValue((int)MatchFieldIndex.IsOverruled, value); }
		}

		/// <summary>The PlannedStart property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."PlannedStart".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> PlannedStart
		{
			get { return (Nullable<System.DateTime>)GetValue((int)MatchFieldIndex.PlannedStart, false); }
			set	{ SetValue((int)MatchFieldIndex.PlannedStart, value); }
		}

		/// <summary>The PlannedEnd property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."PlannedEnd".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> PlannedEnd
		{
			get { return (Nullable<System.DateTime>)GetValue((int)MatchFieldIndex.PlannedEnd, false); }
			set	{ SetValue((int)MatchFieldIndex.PlannedEnd, value); }
		}

		/// <summary>The OrigPlannedStart property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."OrigPlannedStart".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> OrigPlannedStart
		{
			get { return (Nullable<System.DateTime>)GetValue((int)MatchFieldIndex.OrigPlannedStart, false); }
			set	{ SetValue((int)MatchFieldIndex.OrigPlannedStart, value); }
		}

		/// <summary>The OrigPlannedEnd property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."OrigPlannedEnd".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> OrigPlannedEnd
		{
			get { return (Nullable<System.DateTime>)GetValue((int)MatchFieldIndex.OrigPlannedEnd, false); }
			set	{ SetValue((int)MatchFieldIndex.OrigPlannedEnd, value); }
		}

		/// <summary>The RealStart property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."RealStart".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> RealStart
		{
			get { return (Nullable<System.DateTime>)GetValue((int)MatchFieldIndex.RealStart, false); }
			set	{ SetValue((int)MatchFieldIndex.RealStart, value); }
		}

		/// <summary>The RealEnd property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."RealEnd".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> RealEnd
		{
			get { return (Nullable<System.DateTime>)GetValue((int)MatchFieldIndex.RealEnd, false); }
			set	{ SetValue((int)MatchFieldIndex.RealEnd, value); }
		}

		/// <summary>The Remarks property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."Remarks".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Remarks
		{
			get { return (System.String)GetValue((int)MatchFieldIndex.Remarks, true); }
			set	{ SetValue((int)MatchFieldIndex.Remarks, value); }
		}

		/// <summary>The ChangeSerial property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."ChangeSerial".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 ChangeSerial
		{
			get { return (System.Int64)GetValue((int)MatchFieldIndex.ChangeSerial, true); }
			set	{ SetValue((int)MatchFieldIndex.ChangeSerial, value); }
		}

		/// <summary>The CreatedOn property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)MatchFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)MatchFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity Match<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Match"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)MatchFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)MatchFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'SetEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SetEntity))]
		public virtual EntityCollection<SetEntity> Sets { get { return GetOrCreateEntityCollection<SetEntity, SetEntityFactory>("Match", true, false, ref _sets); } }

		/// <summary>Gets / sets related entity of type 'RoundEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual RoundEntity Round
		{
			get { return _round; }
			set { SetSingleRelatedEntityNavigator(value, "Round"); }
		}

		/// <summary>Gets / sets related entity of type 'TeamEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TeamEntity GuestTeam
		{
			get { return _guestTeam; }
			set { SetSingleRelatedEntityNavigator(value, "GuestTeam"); }
		}

		/// <summary>Gets / sets related entity of type 'TeamEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TeamEntity HomeTeam
		{
			get { return _homeTeam; }
			set { SetSingleRelatedEntityNavigator(value, "HomeTeam"); }
		}

		/// <summary>Gets / sets related entity of type 'TeamEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TeamEntity RefereeTeam
		{
			get { return _refereeTeam; }
			set { SetSingleRelatedEntityNavigator(value, "RefereeTeam"); }
		}

		/// <summary>Gets / sets related entity of type 'VenueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual VenueEntity OrigVenue
		{
			get { return _origVenue; }
			set { SetSingleRelatedEntityNavigator(value, "OrigVenue"); }
		}

		/// <summary>Gets / sets related entity of type 'VenueEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual VenueEntity Venue
		{
			get { return _venue; }
			set { SetSingleRelatedEntityNavigator(value, "Venue"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum MatchFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>HomeTeamId. </summary>
		HomeTeamId,
		///<summary>GuestTeamId. </summary>
		GuestTeamId,
		///<summary>RefereeId. </summary>
		RefereeId,
		///<summary>RoundId. </summary>
		RoundId,
		///<summary>VenueId. </summary>
		VenueId,
		///<summary>OrigVenueId. </summary>
		OrigVenueId,
		///<summary>LegSequenceNo. </summary>
		LegSequenceNo,
		///<summary>HomePoints. </summary>
		HomePoints,
		///<summary>GuestPoints. </summary>
		GuestPoints,
		///<summary>IsComplete. </summary>
		IsComplete,
		///<summary>IsOverruled. </summary>
		IsOverruled,
		///<summary>PlannedStart. </summary>
		PlannedStart,
		///<summary>PlannedEnd. </summary>
		PlannedEnd,
		///<summary>OrigPlannedStart. </summary>
		OrigPlannedStart,
		///<summary>OrigPlannedEnd. </summary>
		OrigPlannedEnd,
		///<summary>RealStart. </summary>
		RealStart,
		///<summary>RealEnd. </summary>
		RealEnd,
		///<summary>Remarks. </summary>
		Remarks,
		///<summary>ChangeSerial. </summary>
		ChangeSerial,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Match. </summary>
	public partial class MatchRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between MatchEntity and SetEntity over the 1:n relation they have, using the relation between the fields: Match.Id - Set.MatchId</summary>
		public virtual IEntityRelation SetEntityUsingMatchId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Sets", true, new[] { MatchFields.Id, SetFields.MatchId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MatchEntity and RoundEntity over the m:1 relation they have, using the relation between the fields: Match.RoundId - Round.Id</summary>
		public virtual IEntityRelation RoundEntityUsingRoundId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Round", false, new[] { RoundFields.Id, MatchFields.RoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MatchEntity and TeamEntity over the m:1 relation they have, using the relation between the fields: Match.GuestTeamId - Team.Id</summary>
		public virtual IEntityRelation TeamEntityUsingGuestTeamId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "GuestTeam", false, new[] { TeamFields.Id, MatchFields.GuestTeamId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MatchEntity and TeamEntity over the m:1 relation they have, using the relation between the fields: Match.HomeTeamId - Team.Id</summary>
		public virtual IEntityRelation TeamEntityUsingHomeTeamId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "HomeTeam", false, new[] { TeamFields.Id, MatchFields.HomeTeamId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MatchEntity and TeamEntity over the m:1 relation they have, using the relation between the fields: Match.RefereeId - Team.Id</summary>
		public virtual IEntityRelation TeamEntityUsingRefereeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "RefereeTeam", false, new[] { TeamFields.Id, MatchFields.RefereeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MatchEntity and VenueEntity over the m:1 relation they have, using the relation between the fields: Match.OrigVenueId - Venue.Id</summary>
		public virtual IEntityRelation VenueEntityUsingOrigVenueId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "OrigVenue", false, new[] { VenueFields.Id, MatchFields.OrigVenueId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MatchEntity and VenueEntity over the m:1 relation they have, using the relation between the fields: Match.VenueId - Venue.Id</summary>
		public virtual IEntityRelation VenueEntityUsingVenueId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Venue", false, new[] { VenueFields.Id, MatchFields.VenueId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticMatchRelations
	{
		internal static readonly IEntityRelation SetEntityUsingMatchIdStatic = new MatchRelations().SetEntityUsingMatchId;
		internal static readonly IEntityRelation RoundEntityUsingRoundIdStatic = new MatchRelations().RoundEntityUsingRoundId;
		internal static readonly IEntityRelation TeamEntityUsingGuestTeamIdStatic = new MatchRelations().TeamEntityUsingGuestTeamId;
		internal static readonly IEntityRelation TeamEntityUsingHomeTeamIdStatic = new MatchRelations().TeamEntityUsingHomeTeamId;
		internal static readonly IEntityRelation TeamEntityUsingRefereeIdStatic = new MatchRelations().TeamEntityUsingRefereeId;
		internal static readonly IEntityRelation VenueEntityUsingOrigVenueIdStatic = new MatchRelations().VenueEntityUsingOrigVenueId;
		internal static readonly IEntityRelation VenueEntityUsingVenueIdStatic = new MatchRelations().VenueEntityUsingVenueId;

		/// <summary>CTor</summary>
		static StaticMatchRelations() { }
	}
}
