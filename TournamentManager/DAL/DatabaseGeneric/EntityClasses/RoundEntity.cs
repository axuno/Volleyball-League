//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Round'.<br/><br/></summary>
	[Serializable]
	public partial class RoundEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ExcludeMatchDateEntity> _excludeMatchDates;
		private EntityCollection<MatchEntity> _matches;
		private EntityCollection<RankingEntity> _rankings;
		private EntityCollection<RoundEntity> _previousRound;
		private EntityCollection<RoundLegEntity> _roundLegs;
		private EntityCollection<TeamInRoundEntity> _teamInRounds;
		private EntityCollection<TeamEntity> _teamCollectionViaTeamInRound;
		private MatchRuleEntity _matchRule;
		private RoundEntity _nextRound;
		private RoundTypeEntity _roundType;
		private SetRuleEntity _setRule;
		private TournamentEntity _tournament;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RoundEntityStaticMetaData _staticMetaData = new RoundEntityStaticMetaData();
		private static RoundRelations _relationsFactory = new RoundRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name MatchRule</summary>
			public static readonly string MatchRule = "MatchRule";
			/// <summary>Member name NextRound</summary>
			public static readonly string NextRound = "NextRound";
			/// <summary>Member name RoundType</summary>
			public static readonly string RoundType = "RoundType";
			/// <summary>Member name SetRule</summary>
			public static readonly string SetRule = "SetRule";
			/// <summary>Member name Tournament</summary>
			public static readonly string Tournament = "Tournament";
			/// <summary>Member name ExcludeMatchDates</summary>
			public static readonly string ExcludeMatchDates = "ExcludeMatchDates";
			/// <summary>Member name Matches</summary>
			public static readonly string Matches = "Matches";
			/// <summary>Member name Rankings</summary>
			public static readonly string Rankings = "Rankings";
			/// <summary>Member name PreviousRound</summary>
			public static readonly string PreviousRound = "PreviousRound";
			/// <summary>Member name RoundLegs</summary>
			public static readonly string RoundLegs = "RoundLegs";
			/// <summary>Member name TeamInRounds</summary>
			public static readonly string TeamInRounds = "TeamInRounds";
			/// <summary>Member name TeamCollectionViaTeamInRound</summary>
			public static readonly string TeamCollectionViaTeamInRound = "TeamCollectionViaTeamInRound";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RoundEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RoundEntityStaticMetaData()
			{
				SetEntityCoreInfo("RoundEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.RoundEntity, typeof(RoundEntity), typeof(RoundEntityFactory), false);
				AddNavigatorMetaData<RoundEntity, EntityCollection<ExcludeMatchDateEntity>>("ExcludeMatchDates", a => a._excludeMatchDates, (a, b) => a._excludeMatchDates = b, a => a.ExcludeMatchDates, () => new RoundRelations().ExcludeMatchDateEntityUsingRoundId, typeof(ExcludeMatchDateEntity), (int)TournamentManager.DAL.EntityType.ExcludeMatchDateEntity);
				AddNavigatorMetaData<RoundEntity, EntityCollection<MatchEntity>>("Matches", a => a._matches, (a, b) => a._matches = b, a => a.Matches, () => new RoundRelations().MatchEntityUsingRoundId, typeof(MatchEntity), (int)TournamentManager.DAL.EntityType.MatchEntity);
				AddNavigatorMetaData<RoundEntity, EntityCollection<RankingEntity>>("Rankings", a => a._rankings, (a, b) => a._rankings = b, a => a.Rankings, () => new RoundRelations().RankingEntityUsingRoundId, typeof(RankingEntity), (int)TournamentManager.DAL.EntityType.RankingEntity);
				AddNavigatorMetaData<RoundEntity, EntityCollection<RoundEntity>>("PreviousRound", a => a._previousRound, (a, b) => a._previousRound = b, a => a.PreviousRound, () => new RoundRelations().RoundEntityUsingNextRoundId, typeof(RoundEntity), (int)TournamentManager.DAL.EntityType.RoundEntity);
				AddNavigatorMetaData<RoundEntity, EntityCollection<RoundLegEntity>>("RoundLegs", a => a._roundLegs, (a, b) => a._roundLegs = b, a => a.RoundLegs, () => new RoundRelations().RoundLegEntityUsingRoundId, typeof(RoundLegEntity), (int)TournamentManager.DAL.EntityType.RoundLegEntity);
				AddNavigatorMetaData<RoundEntity, EntityCollection<TeamInRoundEntity>>("TeamInRounds", a => a._teamInRounds, (a, b) => a._teamInRounds = b, a => a.TeamInRounds, () => new RoundRelations().TeamInRoundEntityUsingRoundId, typeof(TeamInRoundEntity), (int)TournamentManager.DAL.EntityType.TeamInRoundEntity);
				AddNavigatorMetaData<RoundEntity, MatchRuleEntity>("MatchRule", "Rounds", (a, b) => a._matchRule = b, a => a._matchRule, (a, b) => a.MatchRule = b, TournamentManager.DAL.RelationClasses.StaticRoundRelations.MatchRuleEntityUsingMatchRuleIdStatic, ()=>new RoundRelations().MatchRuleEntityUsingMatchRuleId, null, new int[] { (int)RoundFieldIndex.MatchRuleId }, null, true, (int)TournamentManager.DAL.EntityType.MatchRuleEntity);
				AddNavigatorMetaData<RoundEntity, RoundEntity>("NextRound", "PreviousRound", (a, b) => a._nextRound = b, a => a._nextRound, (a, b) => a.NextRound = b, TournamentManager.DAL.RelationClasses.StaticRoundRelations.RoundEntityUsingIdNextRoundIdStatic, ()=>new RoundRelations().RoundEntityUsingIdNextRoundId, null, new int[] { (int)RoundFieldIndex.NextRoundId }, null, true, (int)TournamentManager.DAL.EntityType.RoundEntity);
				AddNavigatorMetaData<RoundEntity, RoundTypeEntity>("RoundType", "Rounds", (a, b) => a._roundType = b, a => a._roundType, (a, b) => a.RoundType = b, TournamentManager.DAL.RelationClasses.StaticRoundRelations.RoundTypeEntityUsingTypeIdStatic, ()=>new RoundRelations().RoundTypeEntityUsingTypeId, null, new int[] { (int)RoundFieldIndex.TypeId }, null, true, (int)TournamentManager.DAL.EntityType.RoundTypeEntity);
				AddNavigatorMetaData<RoundEntity, SetRuleEntity>("SetRule", "Rounds", (a, b) => a._setRule = b, a => a._setRule, (a, b) => a.SetRule = b, TournamentManager.DAL.RelationClasses.StaticRoundRelations.SetRuleEntityUsingSetRuleIdStatic, ()=>new RoundRelations().SetRuleEntityUsingSetRuleId, null, new int[] { (int)RoundFieldIndex.SetRuleId }, null, true, (int)TournamentManager.DAL.EntityType.SetRuleEntity);
				AddNavigatorMetaData<RoundEntity, TournamentEntity>("Tournament", "Rounds", (a, b) => a._tournament = b, a => a._tournament, (a, b) => a.Tournament = b, TournamentManager.DAL.RelationClasses.StaticRoundRelations.TournamentEntityUsingTournamentIdStatic, ()=>new RoundRelations().TournamentEntityUsingTournamentId, null, new int[] { (int)RoundFieldIndex.TournamentId }, null, true, (int)TournamentManager.DAL.EntityType.TournamentEntity);
				AddNavigatorMetaData<RoundEntity, EntityCollection<TeamEntity>>("TeamCollectionViaTeamInRound", a => a._teamCollectionViaTeamInRound, (a, b) => a._teamCollectionViaTeamInRound = b, a => a.TeamCollectionViaTeamInRound, () => new RoundRelations().TeamInRoundEntityUsingRoundId, () => new TeamInRoundRelations().TeamEntityUsingTeamId, "RoundEntity__", "TeamInRound_", typeof(TeamEntity), (int)TournamentManager.DAL.EntityType.TeamEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RoundEntity()
		{
		}

		/// <summary> CTor</summary>
		public RoundEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RoundEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RoundEntity</param>
		public RoundEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Round which data should be fetched into this Round object</param>
		public RoundEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Round which data should be fetched into this Round object</param>
		/// <param name="validator">The custom validator object for this RoundEntity</param>
		public RoundEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RoundEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ExcludeMatchDate' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoExcludeMatchDates() { return CreateRelationInfoForNavigator("ExcludeMatchDates"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Match' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMatches() { return CreateRelationInfoForNavigator("Matches"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Ranking' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRankings() { return CreateRelationInfoForNavigator("Rankings"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Round' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPreviousRound() { return CreateRelationInfoForNavigator("PreviousRound"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RoundLeg' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRoundLegs() { return CreateRelationInfoForNavigator("RoundLegs"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'TeamInRound' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTeamInRounds() { return CreateRelationInfoForNavigator("TeamInRounds"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Team' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTeamCollectionViaTeamInRound() { return CreateRelationInfoForNavigator("TeamCollectionViaTeamInRound"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'MatchRule' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMatchRule() { return CreateRelationInfoForNavigator("MatchRule"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Round' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoNextRound() { return CreateRelationInfoForNavigator("NextRound"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'RoundType' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRoundType() { return CreateRelationInfoForNavigator("RoundType"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SetRule' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSetRule() { return CreateRelationInfoForNavigator("SetRule"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Tournament' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTournament() { return CreateRelationInfoForNavigator("Tournament"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RoundEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RoundRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ExcludeMatchDate' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathExcludeMatchDates { get { return _staticMetaData.GetPrefetchPathElement("ExcludeMatchDates", CommonEntityBase.CreateEntityCollection<ExcludeMatchDateEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Match' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMatches { get { return _staticMetaData.GetPrefetchPathElement("Matches", CommonEntityBase.CreateEntityCollection<MatchEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Ranking' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRankings { get { return _staticMetaData.GetPrefetchPathElement("Rankings", CommonEntityBase.CreateEntityCollection<RankingEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Round' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPreviousRound { get { return _staticMetaData.GetPrefetchPathElement("PreviousRound", CommonEntityBase.CreateEntityCollection<RoundEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RoundLeg' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRoundLegs { get { return _staticMetaData.GetPrefetchPathElement("RoundLegs", CommonEntityBase.CreateEntityCollection<RoundLegEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'TeamInRound' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTeamInRounds { get { return _staticMetaData.GetPrefetchPathElement("TeamInRounds", CommonEntityBase.CreateEntityCollection<TeamInRoundEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Team' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTeamCollectionViaTeamInRound { get { return _staticMetaData.GetPrefetchPathElement("TeamCollectionViaTeamInRound", CommonEntityBase.CreateEntityCollection<TeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'MatchRule' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMatchRule { get { return _staticMetaData.GetPrefetchPathElement("MatchRule", CommonEntityBase.CreateEntityCollection<MatchRuleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Round' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathNextRound { get { return _staticMetaData.GetPrefetchPathElement("NextRound", CommonEntityBase.CreateEntityCollection<RoundEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RoundType' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRoundType { get { return _staticMetaData.GetPrefetchPathElement("RoundType", CommonEntityBase.CreateEntityCollection<RoundTypeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SetRule' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSetRule { get { return _staticMetaData.GetPrefetchPathElement("SetRule", CommonEntityBase.CreateEntityCollection<SetRuleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Tournament' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTournament { get { return _staticMetaData.GetPrefetchPathElement("Tournament", CommonEntityBase.CreateEntityCollection<TournamentEntity>()); } }

		/// <summary>The Id property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)RoundFieldIndex.Id, true); }
			set { SetValue((int)RoundFieldIndex.Id, value); }		}

		/// <summary>The TournamentId property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."TournamentId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> TournamentId
		{
			get { return (Nullable<System.Int64>)GetValue((int)RoundFieldIndex.TournamentId, false); }
			set	{ SetValue((int)RoundFieldIndex.TournamentId, value); }
		}

		/// <summary>The Name property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)RoundFieldIndex.Name, true); }
			set	{ SetValue((int)RoundFieldIndex.Name, value); }
		}

		/// <summary>The Description property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."Description".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Description
		{
			get { return (System.String)GetValue((int)RoundFieldIndex.Description, true); }
			set	{ SetValue((int)RoundFieldIndex.Description, value); }
		}

		/// <summary>The TypeId property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."TypeId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 TypeId
		{
			get { return (System.Int64)GetValue((int)RoundFieldIndex.TypeId, true); }
			set	{ SetValue((int)RoundFieldIndex.TypeId, value); }
		}

		/// <summary>The NumOfLegs property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."NumOfLegs".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 NumOfLegs
		{
			get { return (System.Int32)GetValue((int)RoundFieldIndex.NumOfLegs, true); }
			set	{ SetValue((int)RoundFieldIndex.NumOfLegs, value); }
		}

		/// <summary>The MatchRuleId property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."MatchRuleId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 MatchRuleId
		{
			get { return (System.Int64)GetValue((int)RoundFieldIndex.MatchRuleId, true); }
			set	{ SetValue((int)RoundFieldIndex.MatchRuleId, value); }
		}

		/// <summary>The SetRuleId property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."SetRuleId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 SetRuleId
		{
			get { return (System.Int64)GetValue((int)RoundFieldIndex.SetRuleId, true); }
			set	{ SetValue((int)RoundFieldIndex.SetRuleId, value); }
		}

		/// <summary>The IsComplete property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."IsComplete".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsComplete
		{
			get { return (System.Boolean)GetValue((int)RoundFieldIndex.IsComplete, true); }
			set	{ SetValue((int)RoundFieldIndex.IsComplete, value); }
		}

		/// <summary>The NextRoundId property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."NextRoundId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int64> NextRoundId
		{
			get { return (Nullable<System.Int64>)GetValue((int)RoundFieldIndex.NextRoundId, false); }
			set	{ SetValue((int)RoundFieldIndex.NextRoundId, value); }
		}

		/// <summary>The CreatedOn property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)RoundFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)RoundFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity Round<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Round"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)RoundFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)RoundFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ExcludeMatchDateEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ExcludeMatchDateEntity))]
		public virtual EntityCollection<ExcludeMatchDateEntity> ExcludeMatchDates { get { return GetOrCreateEntityCollection<ExcludeMatchDateEntity, ExcludeMatchDateEntityFactory>("Round", true, false, ref _excludeMatchDates); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'MatchEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(MatchEntity))]
		public virtual EntityCollection<MatchEntity> Matches { get { return GetOrCreateEntityCollection<MatchEntity, MatchEntityFactory>("Round", true, false, ref _matches); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RankingEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RankingEntity))]
		public virtual EntityCollection<RankingEntity> Rankings { get { return GetOrCreateEntityCollection<RankingEntity, RankingEntityFactory>("Round", true, false, ref _rankings); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RoundEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RoundEntity))]
		public virtual EntityCollection<RoundEntity> PreviousRound { get { return GetOrCreateEntityCollection<RoundEntity, RoundEntityFactory>("NextRound", true, false, ref _previousRound); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RoundLegEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RoundLegEntity))]
		public virtual EntityCollection<RoundLegEntity> RoundLegs { get { return GetOrCreateEntityCollection<RoundLegEntity, RoundLegEntityFactory>("Round", true, false, ref _roundLegs); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'TeamInRoundEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TeamInRoundEntity))]
		public virtual EntityCollection<TeamInRoundEntity> TeamInRounds { get { return GetOrCreateEntityCollection<TeamInRoundEntity, TeamInRoundEntityFactory>("Round", true, false, ref _teamInRounds); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'TeamEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(TeamEntity))]
		public virtual EntityCollection<TeamEntity> TeamCollectionViaTeamInRound { get { return GetOrCreateEntityCollection<TeamEntity, TeamEntityFactory>("RoundCollectionViaTeamsInRounds", false, true, ref _teamCollectionViaTeamInRound); } }

		/// <summary>Gets / sets related entity of type 'MatchRuleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual MatchRuleEntity MatchRule
		{
			get { return _matchRule; }
			set { SetSingleRelatedEntityNavigator(value, "MatchRule"); }
		}

		/// <summary>Gets / sets related entity of type 'RoundEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual RoundEntity NextRound
		{
			get { return _nextRound; }
			set { SetSingleRelatedEntityNavigator(value, "NextRound"); }
		}

		/// <summary>Gets / sets related entity of type 'RoundTypeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual RoundTypeEntity RoundType
		{
			get { return _roundType; }
			set { SetSingleRelatedEntityNavigator(value, "RoundType"); }
		}

		/// <summary>Gets / sets related entity of type 'SetRuleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SetRuleEntity SetRule
		{
			get { return _setRule; }
			set { SetSingleRelatedEntityNavigator(value, "SetRule"); }
		}

		/// <summary>Gets / sets related entity of type 'TournamentEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TournamentEntity Tournament
		{
			get { return _tournament; }
			set { SetSingleRelatedEntityNavigator(value, "Tournament"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum RoundFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>TournamentId. </summary>
		TournamentId,
		///<summary>Name. </summary>
		Name,
		///<summary>Description. </summary>
		Description,
		///<summary>TypeId. </summary>
		TypeId,
		///<summary>NumOfLegs. </summary>
		NumOfLegs,
		///<summary>MatchRuleId. </summary>
		MatchRuleId,
		///<summary>SetRuleId. </summary>
		SetRuleId,
		///<summary>IsComplete. </summary>
		IsComplete,
		///<summary>NextRoundId. </summary>
		NextRoundId,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Round. </summary>
	public partial class RoundRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between RoundEntity and ExcludeMatchDateEntity over the 1:n relation they have, using the relation between the fields: Round.Id - ExcludeMatchDate.RoundId</summary>
		public virtual IEntityRelation ExcludeMatchDateEntityUsingRoundId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ExcludeMatchDates", true, new[] { RoundFields.Id, ExcludeMatchDateFields.RoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and MatchEntity over the 1:n relation they have, using the relation between the fields: Round.Id - Match.RoundId</summary>
		public virtual IEntityRelation MatchEntityUsingRoundId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Matches", true, new[] { RoundFields.Id, MatchFields.RoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and RankingEntity over the 1:n relation they have, using the relation between the fields: Round.Id - Ranking.RoundId</summary>
		public virtual IEntityRelation RankingEntityUsingRoundId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Rankings", true, new[] { RoundFields.Id, RankingFields.RoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and RoundEntity over the 1:n relation they have, using the relation between the fields: Round.Id - Round.NextRoundId</summary>
		public virtual IEntityRelation RoundEntityUsingNextRoundId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PreviousRound", true, new[] { RoundFields.Id, RoundFields.NextRoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and RoundLegEntity over the 1:n relation they have, using the relation between the fields: Round.Id - RoundLeg.RoundId</summary>
		public virtual IEntityRelation RoundLegEntityUsingRoundId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RoundLegs", true, new[] { RoundFields.Id, RoundLegFields.RoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and TeamInRoundEntity over the 1:n relation they have, using the relation between the fields: Round.Id - TeamInRound.RoundId</summary>
		public virtual IEntityRelation TeamInRoundEntityUsingRoundId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "TeamInRounds", true, new[] { RoundFields.Id, TeamInRoundFields.RoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and MatchRuleEntity over the m:1 relation they have, using the relation between the fields: Round.MatchRuleId - MatchRule.Id</summary>
		public virtual IEntityRelation MatchRuleEntityUsingMatchRuleId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "MatchRule", false, new[] { MatchRuleFields.Id, RoundFields.MatchRuleId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and RoundEntity over the m:1 relation they have, using the relation between the fields: Round.NextRoundId - Round.Id</summary>
		public virtual IEntityRelation RoundEntityUsingIdNextRoundId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "NextRound", false, new[] { RoundFields.Id, RoundFields.NextRoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and RoundTypeEntity over the m:1 relation they have, using the relation between the fields: Round.TypeId - RoundType.Id</summary>
		public virtual IEntityRelation RoundTypeEntityUsingTypeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "RoundType", false, new[] { RoundTypeFields.Id, RoundFields.TypeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and SetRuleEntity over the m:1 relation they have, using the relation between the fields: Round.SetRuleId - SetRule.Id</summary>
		public virtual IEntityRelation SetRuleEntityUsingSetRuleId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SetRule", false, new[] { SetRuleFields.Id, RoundFields.SetRuleId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoundEntity and TournamentEntity over the m:1 relation they have, using the relation between the fields: Round.TournamentId - Tournament.Id</summary>
		public virtual IEntityRelation TournamentEntityUsingTournamentId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Tournament", false, new[] { TournamentFields.Id, RoundFields.TournamentId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRoundRelations
	{
		internal static readonly IEntityRelation ExcludeMatchDateEntityUsingRoundIdStatic = new RoundRelations().ExcludeMatchDateEntityUsingRoundId;
		internal static readonly IEntityRelation MatchEntityUsingRoundIdStatic = new RoundRelations().MatchEntityUsingRoundId;
		internal static readonly IEntityRelation RankingEntityUsingRoundIdStatic = new RoundRelations().RankingEntityUsingRoundId;
		internal static readonly IEntityRelation RoundEntityUsingNextRoundIdStatic = new RoundRelations().RoundEntityUsingNextRoundId;
		internal static readonly IEntityRelation RoundLegEntityUsingRoundIdStatic = new RoundRelations().RoundLegEntityUsingRoundId;
		internal static readonly IEntityRelation TeamInRoundEntityUsingRoundIdStatic = new RoundRelations().TeamInRoundEntityUsingRoundId;
		internal static readonly IEntityRelation MatchRuleEntityUsingMatchRuleIdStatic = new RoundRelations().MatchRuleEntityUsingMatchRuleId;
		internal static readonly IEntityRelation RoundEntityUsingIdNextRoundIdStatic = new RoundRelations().RoundEntityUsingIdNextRoundId;
		internal static readonly IEntityRelation RoundTypeEntityUsingTypeIdStatic = new RoundRelations().RoundTypeEntityUsingTypeId;
		internal static readonly IEntityRelation SetRuleEntityUsingSetRuleIdStatic = new RoundRelations().SetRuleEntityUsingSetRuleId;
		internal static readonly IEntityRelation TournamentEntityUsingTournamentIdStatic = new RoundRelations().TournamentEntityUsingTournamentId;

		/// <summary>CTor</summary>
		static StaticRoundRelations() { }
	}
}
