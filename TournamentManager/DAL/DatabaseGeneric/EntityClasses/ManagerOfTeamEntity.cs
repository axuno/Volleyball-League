//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'ManagerOfTeam'.<br/><br/></summary>
	[Serializable]
	public partial class ManagerOfTeamEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private TeamEntity _team;
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static ManagerOfTeamEntityStaticMetaData _staticMetaData = new ManagerOfTeamEntityStaticMetaData();
		private static ManagerOfTeamRelations _relationsFactory = new ManagerOfTeamRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Team</summary>
			public static readonly string Team = "Team";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class ManagerOfTeamEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public ManagerOfTeamEntityStaticMetaData()
			{
				SetEntityCoreInfo("ManagerOfTeamEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.ManagerOfTeamEntity, typeof(ManagerOfTeamEntity), typeof(ManagerOfTeamEntityFactory), false);
				AddNavigatorMetaData<ManagerOfTeamEntity, TeamEntity>("Team", "ManagerOfTeams", (a, b) => a._team = b, a => a._team, (a, b) => a.Team = b, TournamentManager.DAL.RelationClasses.StaticManagerOfTeamRelations.TeamEntityUsingTeamIdStatic, ()=>new ManagerOfTeamRelations().TeamEntityUsingTeamId, null, new int[] { (int)ManagerOfTeamFieldIndex.TeamId }, null, true, (int)TournamentManager.DAL.EntityType.TeamEntity);
				AddNavigatorMetaData<ManagerOfTeamEntity, UserEntity>("User", "ManagerOfTeams", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, TournamentManager.DAL.RelationClasses.StaticManagerOfTeamRelations.UserEntityUsingUserIdStatic, ()=>new ManagerOfTeamRelations().UserEntityUsingUserId, null, new int[] { (int)ManagerOfTeamFieldIndex.UserId }, null, true, (int)TournamentManager.DAL.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static ManagerOfTeamEntity()
		{
		}

		/// <summary> CTor</summary>
		public ManagerOfTeamEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public ManagerOfTeamEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this ManagerOfTeamEntity</param>
		public ManagerOfTeamEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="userId">PK value for ManagerOfTeam which data should be fetched into this ManagerOfTeam object</param>
		/// <param name="teamId">PK value for ManagerOfTeam which data should be fetched into this ManagerOfTeam object</param>
		public ManagerOfTeamEntity(System.Int64 userId, System.Int64 teamId) : this(userId, teamId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="userId">PK value for ManagerOfTeam which data should be fetched into this ManagerOfTeam object</param>
		/// <param name="teamId">PK value for ManagerOfTeam which data should be fetched into this ManagerOfTeam object</param>
		/// <param name="validator">The custom validator object for this ManagerOfTeamEntity</param>
		public ManagerOfTeamEntity(System.Int64 userId, System.Int64 teamId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.UserId = userId;
			this.TeamId = teamId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected ManagerOfTeamEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Team' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTeam() { return CreateRelationInfoForNavigator("Team"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this ManagerOfTeamEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static ManagerOfTeamRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Team' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTeam { get { return _staticMetaData.GetPrefetchPathElement("Team", CommonEntityBase.CreateEntityCollection<TeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The Id property of the Entity ManagerOfTeam<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ManagerOfTeam"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)ManagerOfTeamFieldIndex.Id, true); }
		}

		/// <summary>The UserId property of the Entity ManagerOfTeam<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ManagerOfTeam"."UserId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int64 UserId
		{
			get { return (System.Int64)GetValue((int)ManagerOfTeamFieldIndex.UserId, true); }
			set	{ SetValue((int)ManagerOfTeamFieldIndex.UserId, value); }
		}

		/// <summary>The TeamId property of the Entity ManagerOfTeam<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ManagerOfTeam"."TeamId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int64 TeamId
		{
			get { return (System.Int64)GetValue((int)ManagerOfTeamFieldIndex.TeamId, true); }
			set	{ SetValue((int)ManagerOfTeamFieldIndex.TeamId, value); }
		}

		/// <summary>The CreatedOn property of the Entity ManagerOfTeam<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ManagerOfTeam"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)ManagerOfTeamFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)ManagerOfTeamFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity ManagerOfTeam<br/><br/></summary>
		/// <remarks>Mapped on  table field: "ManagerOfTeam"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)ManagerOfTeamFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)ManagerOfTeamFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets / sets related entity of type 'TeamEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TeamEntity Team
		{
			get { return _team; }
			set { SetSingleRelatedEntityNavigator(value, "Team"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum ManagerOfTeamFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>UserId. </summary>
		UserId,
		///<summary>TeamId. </summary>
		TeamId,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: ManagerOfTeam. </summary>
	public partial class ManagerOfTeamRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between ManagerOfTeamEntity and TeamEntity over the m:1 relation they have, using the relation between the fields: ManagerOfTeam.TeamId - Team.Id</summary>
		public virtual IEntityRelation TeamEntityUsingTeamId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Team", false, new[] { TeamFields.Id, ManagerOfTeamFields.TeamId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between ManagerOfTeamEntity and UserEntity over the m:1 relation they have, using the relation between the fields: ManagerOfTeam.UserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.Id, ManagerOfTeamFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticManagerOfTeamRelations
	{
		internal static readonly IEntityRelation TeamEntityUsingTeamIdStatic = new ManagerOfTeamRelations().TeamEntityUsingTeamId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new ManagerOfTeamRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticManagerOfTeamRelations() { }
	}
}
