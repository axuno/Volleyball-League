//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'IdentityUserRole'.<br/><br/></summary>
	[Serializable]
	public partial class IdentityUserRoleEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private IdentityRoleEntity _identityRole;
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static IdentityUserRoleEntityStaticMetaData _staticMetaData = new IdentityUserRoleEntityStaticMetaData();
		private static IdentityUserRoleRelations _relationsFactory = new IdentityUserRoleRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name IdentityRole</summary>
			public static readonly string IdentityRole = "IdentityRole";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class IdentityUserRoleEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public IdentityUserRoleEntityStaticMetaData()
			{
				SetEntityCoreInfo("IdentityUserRoleEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.IdentityUserRoleEntity, typeof(IdentityUserRoleEntity), typeof(IdentityUserRoleEntityFactory), false);
				AddNavigatorMetaData<IdentityUserRoleEntity, IdentityRoleEntity>("IdentityRole", "IdentityUserRoles", (a, b) => a._identityRole = b, a => a._identityRole, (a, b) => a.IdentityRole = b, TournamentManager.DAL.RelationClasses.StaticIdentityUserRoleRelations.IdentityRoleEntityUsingRoleIdStatic, ()=>new IdentityUserRoleRelations().IdentityRoleEntityUsingRoleId, null, new int[] { (int)IdentityUserRoleFieldIndex.RoleId }, null, true, (int)TournamentManager.DAL.EntityType.IdentityRoleEntity);
				AddNavigatorMetaData<IdentityUserRoleEntity, UserEntity>("User", "IdentityUserRoles", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, TournamentManager.DAL.RelationClasses.StaticIdentityUserRoleRelations.UserEntityUsingUserIdStatic, ()=>new IdentityUserRoleRelations().UserEntityUsingUserId, null, new int[] { (int)IdentityUserRoleFieldIndex.UserId }, null, true, (int)TournamentManager.DAL.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static IdentityUserRoleEntity()
		{
		}

		/// <summary> CTor</summary>
		public IdentityUserRoleEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public IdentityUserRoleEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this IdentityUserRoleEntity</param>
		public IdentityUserRoleEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="roleId">PK value for IdentityUserRole which data should be fetched into this IdentityUserRole object</param>
		/// <param name="userId">PK value for IdentityUserRole which data should be fetched into this IdentityUserRole object</param>
		public IdentityUserRoleEntity(System.Int64 roleId, System.Int64 userId) : this(roleId, userId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="roleId">PK value for IdentityUserRole which data should be fetched into this IdentityUserRole object</param>
		/// <param name="userId">PK value for IdentityUserRole which data should be fetched into this IdentityUserRole object</param>
		/// <param name="validator">The custom validator object for this IdentityUserRoleEntity</param>
		public IdentityUserRoleEntity(System.Int64 roleId, System.Int64 userId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.RoleId = roleId;
			this.UserId = userId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected IdentityUserRoleEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'IdentityRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIdentityRole() { return CreateRelationInfoForNavigator("IdentityRole"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this IdentityUserRoleEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static IdentityUserRoleRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'IdentityRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIdentityRole { get { return _staticMetaData.GetPrefetchPathElement("IdentityRole", CommonEntityBase.CreateEntityCollection<IdentityRoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The Id property of the Entity IdentityUserRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "IdentityUserRole"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)IdentityUserRoleFieldIndex.Id, true); }
		}

		/// <summary>The RoleId property of the Entity IdentityUserRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "IdentityUserRole"."RoleId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int64 RoleId
		{
			get { return (System.Int64)GetValue((int)IdentityUserRoleFieldIndex.RoleId, true); }
			set	{ SetValue((int)IdentityUserRoleFieldIndex.RoleId, value); }
		}

		/// <summary>The UserId property of the Entity IdentityUserRole<br/><br/></summary>
		/// <remarks>Mapped on  table field: "IdentityUserRole"."UserId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int64 UserId
		{
			get { return (System.Int64)GetValue((int)IdentityUserRoleFieldIndex.UserId, true); }
			set	{ SetValue((int)IdentityUserRoleFieldIndex.UserId, value); }
		}

		/// <summary>Gets / sets related entity of type 'IdentityRoleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual IdentityRoleEntity IdentityRole
		{
			get { return _identityRole; }
			set { SetSingleRelatedEntityNavigator(value, "IdentityRole"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum IdentityUserRoleFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>RoleId. </summary>
		RoleId,
		///<summary>UserId. </summary>
		UserId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: IdentityUserRole. </summary>
	public partial class IdentityUserRoleRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between IdentityUserRoleEntity and IdentityRoleEntity over the m:1 relation they have, using the relation between the fields: IdentityUserRole.RoleId - IdentityRole.Id</summary>
		public virtual IEntityRelation IdentityRoleEntityUsingRoleId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "IdentityRole", false, new[] { IdentityRoleFields.Id, IdentityUserRoleFields.RoleId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between IdentityUserRoleEntity and UserEntity over the m:1 relation they have, using the relation between the fields: IdentityUserRole.UserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.Id, IdentityUserRoleFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticIdentityUserRoleRelations
	{
		internal static readonly IEntityRelation IdentityRoleEntityUsingRoleIdStatic = new IdentityUserRoleRelations().IdentityRoleEntityUsingRoleId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new IdentityUserRoleRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticIdentityUserRoleRelations() { }
	}
}
