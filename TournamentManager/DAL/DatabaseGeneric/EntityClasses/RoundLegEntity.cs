//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'RoundLeg'.<br/><br/></summary>
	[Serializable]
	public partial class RoundLegEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private RoundEntity _round;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RoundLegEntityStaticMetaData _staticMetaData = new RoundLegEntityStaticMetaData();
		private static RoundLegRelations _relationsFactory = new RoundLegRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Round</summary>
			public static readonly string Round = "Round";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RoundLegEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RoundLegEntityStaticMetaData()
			{
				SetEntityCoreInfo("RoundLegEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.RoundLegEntity, typeof(RoundLegEntity), typeof(RoundLegEntityFactory), false);
				AddNavigatorMetaData<RoundLegEntity, RoundEntity>("Round", "RoundLegs", (a, b) => a._round = b, a => a._round, (a, b) => a.Round = b, TournamentManager.DAL.RelationClasses.StaticRoundLegRelations.RoundEntityUsingRoundIdStatic, ()=>new RoundLegRelations().RoundEntityUsingRoundId, null, new int[] { (int)RoundLegFieldIndex.RoundId }, null, true, (int)TournamentManager.DAL.EntityType.RoundEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RoundLegEntity()
		{
		}

		/// <summary> CTor</summary>
		public RoundLegEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RoundLegEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RoundLegEntity</param>
		public RoundLegEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for RoundLeg which data should be fetched into this RoundLeg object</param>
		public RoundLegEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for RoundLeg which data should be fetched into this RoundLeg object</param>
		/// <param name="validator">The custom validator object for this RoundLegEntity</param>
		public RoundLegEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RoundLegEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Round' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRound() { return CreateRelationInfoForNavigator("Round"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RoundLegEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RoundLegRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Round' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRound { get { return _staticMetaData.GetPrefetchPathElement("Round", CommonEntityBase.CreateEntityCollection<RoundEntity>()); } }

		/// <summary>The Id property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)RoundLegFieldIndex.Id, true); }
			set { SetValue((int)RoundLegFieldIndex.Id, value); }		}

		/// <summary>The RoundId property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."RoundId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 RoundId
		{
			get { return (System.Int64)GetValue((int)RoundLegFieldIndex.RoundId, true); }
			set	{ SetValue((int)RoundLegFieldIndex.RoundId, value); }
		}

		/// <summary>The SequenceNo property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."SequenceNo".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 SequenceNo
		{
			get { return (System.Int32)GetValue((int)RoundLegFieldIndex.SequenceNo, true); }
			set	{ SetValue((int)RoundLegFieldIndex.SequenceNo, value); }
		}

		/// <summary>The Description property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."Description".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Description
		{
			get { return (System.String)GetValue((int)RoundLegFieldIndex.Description, true); }
			set	{ SetValue((int)RoundLegFieldIndex.Description, value); }
		}

		/// <summary>The StartDateTime property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."StartDateTime".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime StartDateTime
		{
			get { return (System.DateTime)GetValue((int)RoundLegFieldIndex.StartDateTime, true); }
			set	{ SetValue((int)RoundLegFieldIndex.StartDateTime, value); }
		}

		/// <summary>The EndDateTime property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."EndDateTime".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime EndDateTime
		{
			get { return (System.DateTime)GetValue((int)RoundLegFieldIndex.EndDateTime, true); }
			set	{ SetValue((int)RoundLegFieldIndex.EndDateTime, value); }
		}

		/// <summary>The CreatedOn property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)RoundLegFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)RoundLegFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity RoundLeg<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoundLeg"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)RoundLegFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)RoundLegFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets / sets related entity of type 'RoundEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual RoundEntity Round
		{
			get { return _round; }
			set { SetSingleRelatedEntityNavigator(value, "Round"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum RoundLegFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>RoundId. </summary>
		RoundId,
		///<summary>SequenceNo. </summary>
		SequenceNo,
		///<summary>Description. </summary>
		Description,
		///<summary>StartDateTime. </summary>
		StartDateTime,
		///<summary>EndDateTime. </summary>
		EndDateTime,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: RoundLeg. </summary>
	public partial class RoundLegRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between RoundLegEntity and RoundEntity over the m:1 relation they have, using the relation between the fields: RoundLeg.RoundId - Round.Id</summary>
		public virtual IEntityRelation RoundEntityUsingRoundId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Round", false, new[] { RoundFields.Id, RoundLegFields.RoundId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRoundLegRelations
	{
		internal static readonly IEntityRelation RoundEntityUsingRoundIdStatic = new RoundLegRelations().RoundEntityUsingRoundId;

		/// <summary>CTor</summary>
		static StaticRoundLegRelations() { }
	}
}
