//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using TournamentManager.DAL.HelperClasses;
using TournamentManager.DAL.FactoryClasses;
using TournamentManager.DAL.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace TournamentManager.DAL.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Ranking'.<br/><br/></summary>
	[Serializable]
	public partial class RankingEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private RoundEntity _round;
		private TeamEntity _team;
		private TournamentEntity _tournament;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RankingEntityStaticMetaData _staticMetaData = new RankingEntityStaticMetaData();
		private static RankingRelations _relationsFactory = new RankingRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Round</summary>
			public static readonly string Round = "Round";
			/// <summary>Member name Team</summary>
			public static readonly string Team = "Team";
			/// <summary>Member name Tournament</summary>
			public static readonly string Tournament = "Tournament";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RankingEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RankingEntityStaticMetaData()
			{
				SetEntityCoreInfo("RankingEntity", InheritanceHierarchyType.None, false, (int)TournamentManager.DAL.EntityType.RankingEntity, typeof(RankingEntity), typeof(RankingEntityFactory), false);
				AddNavigatorMetaData<RankingEntity, RoundEntity>("Round", "Rankings", (a, b) => a._round = b, a => a._round, (a, b) => a.Round = b, TournamentManager.DAL.RelationClasses.StaticRankingRelations.RoundEntityUsingRoundIdStatic, ()=>new RankingRelations().RoundEntityUsingRoundId, null, new int[] { (int)RankingFieldIndex.RoundId }, null, true, (int)TournamentManager.DAL.EntityType.RoundEntity);
				AddNavigatorMetaData<RankingEntity, TeamEntity>("Team", "Rankings", (a, b) => a._team = b, a => a._team, (a, b) => a.Team = b, TournamentManager.DAL.RelationClasses.StaticRankingRelations.TeamEntityUsingTeamIdStatic, ()=>new RankingRelations().TeamEntityUsingTeamId, null, new int[] { (int)RankingFieldIndex.TeamId }, null, true, (int)TournamentManager.DAL.EntityType.TeamEntity);
				AddNavigatorMetaData<RankingEntity, TournamentEntity>("Tournament", "Rankings", (a, b) => a._tournament = b, a => a._tournament, (a, b) => a.Tournament = b, TournamentManager.DAL.RelationClasses.StaticRankingRelations.TournamentEntityUsingTournamentIdStatic, ()=>new RankingRelations().TournamentEntityUsingTournamentId, null, new int[] { (int)RankingFieldIndex.TournamentId }, null, true, (int)TournamentManager.DAL.EntityType.TournamentEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RankingEntity()
		{
		}

		/// <summary> CTor</summary>
		public RankingEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RankingEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RankingEntity</param>
		public RankingEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Ranking which data should be fetched into this Ranking object</param>
		public RankingEntity(System.Int64 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Ranking which data should be fetched into this Ranking object</param>
		/// <param name="validator">The custom validator object for this RankingEntity</param>
		public RankingEntity(System.Int64 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RankingEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Round' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRound() { return CreateRelationInfoForNavigator("Round"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Team' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTeam() { return CreateRelationInfoForNavigator("Team"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Tournament' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoTournament() { return CreateRelationInfoForNavigator("Tournament"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RankingEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RankingRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Round' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRound { get { return _staticMetaData.GetPrefetchPathElement("Round", CommonEntityBase.CreateEntityCollection<RoundEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Team' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTeam { get { return _staticMetaData.GetPrefetchPathElement("Team", CommonEntityBase.CreateEntityCollection<TeamEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Tournament' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathTournament { get { return _staticMetaData.GetPrefetchPathElement("Tournament", CommonEntityBase.CreateEntityCollection<TournamentEntity>()); } }

		/// <summary>The Id property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."Id".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int64 Id
		{
			get { return (System.Int64)GetValue((int)RankingFieldIndex.Id, true); }
			set { SetValue((int)RankingFieldIndex.Id, value); }		}

		/// <summary>The TournamentId property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."TournamentId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 TournamentId
		{
			get { return (System.Int64)GetValue((int)RankingFieldIndex.TournamentId, true); }
			set	{ SetValue((int)RankingFieldIndex.TournamentId, value); }
		}

		/// <summary>The RoundId property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."RoundId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 RoundId
		{
			get { return (System.Int64)GetValue((int)RankingFieldIndex.RoundId, true); }
			set	{ SetValue((int)RankingFieldIndex.RoundId, value); }
		}

		/// <summary>The TeamId property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."TeamId".<br/>Table field type characteristics (type, precision, scale, length): BigInt, 19, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int64 TeamId
		{
			get { return (System.Int64)GetValue((int)RankingFieldIndex.TeamId, true); }
			set	{ SetValue((int)RankingFieldIndex.TeamId, value); }
		}

		/// <summary>The ValuationDate property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."ValuationDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ValuationDate
		{
			get { return (System.DateTime)GetValue((int)RankingFieldIndex.ValuationDate, true); }
			set	{ SetValue((int)RankingFieldIndex.ValuationDate, value); }
		}

		/// <summary>The Rank property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."Rank".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 Rank
		{
			get { return (System.Int32)GetValue((int)RankingFieldIndex.Rank, true); }
			set	{ SetValue((int)RankingFieldIndex.Rank, value); }
		}

		/// <summary>The MatchPointsWon property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."MatchPointsWon".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> MatchPointsWon
		{
			get { return (Nullable<System.Int32>)GetValue((int)RankingFieldIndex.MatchPointsWon, false); }
			set	{ SetValue((int)RankingFieldIndex.MatchPointsWon, value); }
		}

		/// <summary>The MatchPointsLost property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."MatchPointsLost".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> MatchPointsLost
		{
			get { return (Nullable<System.Int32>)GetValue((int)RankingFieldIndex.MatchPointsLost, false); }
			set	{ SetValue((int)RankingFieldIndex.MatchPointsLost, value); }
		}

		/// <summary>The SetPointsWon property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."SetPointsWon".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SetPointsWon
		{
			get { return (Nullable<System.Int32>)GetValue((int)RankingFieldIndex.SetPointsWon, false); }
			set	{ SetValue((int)RankingFieldIndex.SetPointsWon, value); }
		}

		/// <summary>The SetPointsLost property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."SetPointsLost".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> SetPointsLost
		{
			get { return (Nullable<System.Int32>)GetValue((int)RankingFieldIndex.SetPointsLost, false); }
			set	{ SetValue((int)RankingFieldIndex.SetPointsLost, value); }
		}

		/// <summary>The BallPointsWon property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."BallPointsWon".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> BallPointsWon
		{
			get { return (Nullable<System.Int32>)GetValue((int)RankingFieldIndex.BallPointsWon, false); }
			set	{ SetValue((int)RankingFieldIndex.BallPointsWon, value); }
		}

		/// <summary>The BallPointsLost property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."BallPointsLost".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> BallPointsLost
		{
			get { return (Nullable<System.Int32>)GetValue((int)RankingFieldIndex.BallPointsLost, false); }
			set	{ SetValue((int)RankingFieldIndex.BallPointsLost, value); }
		}

		/// <summary>The MatchesPlayed property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."MatchesPlayed".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 MatchesPlayed
		{
			get { return (System.Int32)GetValue((int)RankingFieldIndex.MatchesPlayed, true); }
			set	{ SetValue((int)RankingFieldIndex.MatchesPlayed, value); }
		}

		/// <summary>The MatchesToPlay property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."MatchesToPlay".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 MatchesToPlay
		{
			get { return (System.Int32)GetValue((int)RankingFieldIndex.MatchesToPlay, true); }
			set	{ SetValue((int)RankingFieldIndex.MatchesToPlay, value); }
		}

		/// <summary>The CreatedOn property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."CreatedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime CreatedOn
		{
			get { return (System.DateTime)GetValue((int)RankingFieldIndex.CreatedOn, true); }
			set	{ SetValue((int)RankingFieldIndex.CreatedOn, value); }
		}

		/// <summary>The ModifiedOn property of the Entity Ranking<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Ranking"."ModifiedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedOn
		{
			get { return (System.DateTime)GetValue((int)RankingFieldIndex.ModifiedOn, true); }
			set	{ SetValue((int)RankingFieldIndex.ModifiedOn, value); }
		}

		/// <summary>Gets / sets related entity of type 'RoundEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual RoundEntity Round
		{
			get { return _round; }
			set { SetSingleRelatedEntityNavigator(value, "Round"); }
		}

		/// <summary>Gets / sets related entity of type 'TeamEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TeamEntity Team
		{
			get { return _team; }
			set { SetSingleRelatedEntityNavigator(value, "Team"); }
		}

		/// <summary>Gets / sets related entity of type 'TournamentEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual TournamentEntity Tournament
		{
			get { return _tournament; }
			set { SetSingleRelatedEntityNavigator(value, "Tournament"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace TournamentManager.DAL
{
	public enum RankingFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>TournamentId. </summary>
		TournamentId,
		///<summary>RoundId. </summary>
		RoundId,
		///<summary>TeamId. </summary>
		TeamId,
		///<summary>ValuationDate. </summary>
		ValuationDate,
		///<summary>Rank. </summary>
		Rank,
		///<summary>MatchPointsWon. </summary>
		MatchPointsWon,
		///<summary>MatchPointsLost. </summary>
		MatchPointsLost,
		///<summary>SetPointsWon. </summary>
		SetPointsWon,
		///<summary>SetPointsLost. </summary>
		SetPointsLost,
		///<summary>BallPointsWon. </summary>
		BallPointsWon,
		///<summary>BallPointsLost. </summary>
		BallPointsLost,
		///<summary>MatchesPlayed. </summary>
		MatchesPlayed,
		///<summary>MatchesToPlay. </summary>
		MatchesToPlay,
		///<summary>CreatedOn. </summary>
		CreatedOn,
		///<summary>ModifiedOn. </summary>
		ModifiedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace TournamentManager.DAL.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Ranking. </summary>
	public partial class RankingRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between RankingEntity and RoundEntity over the m:1 relation they have, using the relation between the fields: Ranking.RoundId - Round.Id</summary>
		public virtual IEntityRelation RoundEntityUsingRoundId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Round", false, new[] { RoundFields.Id, RankingFields.RoundId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RankingEntity and TeamEntity over the m:1 relation they have, using the relation between the fields: Ranking.TeamId - Team.Id</summary>
		public virtual IEntityRelation TeamEntityUsingTeamId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Team", false, new[] { TeamFields.Id, RankingFields.TeamId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RankingEntity and TournamentEntity over the m:1 relation they have, using the relation between the fields: Ranking.TournamentId - Tournament.Id</summary>
		public virtual IEntityRelation TournamentEntityUsingTournamentId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Tournament", false, new[] { TournamentFields.Id, RankingFields.TournamentId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRankingRelations
	{
		internal static readonly IEntityRelation RoundEntityUsingRoundIdStatic = new RankingRelations().RoundEntityUsingRoundId;
		internal static readonly IEntityRelation TeamEntityUsingTeamIdStatic = new RankingRelations().TeamEntityUsingTeamId;
		internal static readonly IEntityRelation TournamentEntityUsingTournamentIdStatic = new RankingRelations().TournamentEntityUsingTournamentId;

		/// <summary>CTor</summary>
		static StaticRankingRelations() { }
	}
}
