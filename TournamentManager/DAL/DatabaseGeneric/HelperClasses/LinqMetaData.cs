//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Linq;
using System.Collections.Generic;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using TournamentManager.DAL.EntityClasses;
using TournamentManager.DAL.FactoryClasses;

namespace TournamentManager.DAL.Linq
{
	/// <summary>Meta-data class for the construction of Linq queries which are to be executed using LLBLGen Pro code.</summary>
	public partial class LinqMetaData: ILinqMetaData
	{
		/// <summary>CTor. Using this ctor will leave the IDataAccessAdapter object to use empty. To be able to execute the query, an IDataAccessAdapter instance
		/// is required, and has to be set on the LLBLGenProProvider2 object in the query to execute. </summary>
		public LinqMetaData() : this(null, null) { }
		
		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse) : this (adapterToUse, null) { }

		/// <summary>CTor which accepts an IDataAccessAdapter implementing object, which will be used to execute queries created with this metadata class.</summary>
		/// <param name="adapterToUse">the IDataAccessAdapter to use in queries created with this meta data</param>
		/// <param name="customFunctionMappings">The custom function mappings to use. These take higher precedence than the ones in the DQE to use.</param>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data till they go out of scope.</remarks>
		public LinqMetaData(IDataAccessAdapter adapterToUse, FunctionMappingStore customFunctionMappings)
		{
			this.AdapterToUse = adapterToUse;
			this.CustomFunctionMappings = customFunctionMappings;
		}
	
		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <param name="typeOfEntity">the type of the entity to get the datasource for</param>
		/// <returns>the requested datasource</returns>
		public IDataSource GetQueryableForEntity(int typeOfEntity)
		{
			switch((TournamentManager.DAL.EntityType)typeOfEntity)
			{
				case TournamentManager.DAL.EntityType.AvailableMatchDateEntity:
					return this.AvailableMatchDate;
				case TournamentManager.DAL.EntityType.ExcludeMatchDateEntity:
					return this.ExcludeMatchDate;
				case TournamentManager.DAL.EntityType.IdentityRoleEntity:
					return this.IdentityRole;
				case TournamentManager.DAL.EntityType.IdentityRoleClaimEntity:
					return this.IdentityRoleClaim;
				case TournamentManager.DAL.EntityType.IdentityUserClaimEntity:
					return this.IdentityUserClaim;
				case TournamentManager.DAL.EntityType.IdentityUserLoginEntity:
					return this.IdentityUserLogin;
				case TournamentManager.DAL.EntityType.IdentityUserRoleEntity:
					return this.IdentityUserRole;
				case TournamentManager.DAL.EntityType.IdentityUserTokenEntity:
					return this.IdentityUserToken;
				case TournamentManager.DAL.EntityType.ManagerOfTeamEntity:
					return this.ManagerOfTeam;
				case TournamentManager.DAL.EntityType.MatchEntity:
					return this.Match;
				case TournamentManager.DAL.EntityType.MatchRuleEntity:
					return this.MatchRule;
				case TournamentManager.DAL.EntityType.PlayerInTeamEntity:
					return this.PlayerInTeam;
				case TournamentManager.DAL.EntityType.RankingEntity:
					return this.Ranking;
				case TournamentManager.DAL.EntityType.RegistrationEntity:
					return this.Registration;
				case TournamentManager.DAL.EntityType.RoundEntity:
					return this.Round;
				case TournamentManager.DAL.EntityType.RoundLegEntity:
					return this.RoundLeg;
				case TournamentManager.DAL.EntityType.RoundTypeEntity:
					return this.RoundType;
				case TournamentManager.DAL.EntityType.SetEntity:
					return this.Set;
				case TournamentManager.DAL.EntityType.SetRuleEntity:
					return this.SetRule;
				case TournamentManager.DAL.EntityType.TeamEntity:
					return this.Team;
				case TournamentManager.DAL.EntityType.TeamInRoundEntity:
					return this.TeamInRound;
				case TournamentManager.DAL.EntityType.TournamentEntity:
					return this.Tournament;
				case TournamentManager.DAL.EntityType.TournamentTypeEntity:
					return this.TournamentType;
				case TournamentManager.DAL.EntityType.UserEntity:
					return this.User;
				case TournamentManager.DAL.EntityType.VenueEntity:
					return this.Venue;
				default:
					return null;
			}
		}

		/// <summary>returns the datasource to use in a Linq query for the entity type specified</summary>
		/// <typeparam name="TEntity">the type of the entity to get the datasource for</typeparam>
		/// <returns>the requested datasource</returns>
		public DataSource2<TEntity> GetQueryableForEntity<TEntity>()
				where TEntity : class
		{
			return new DataSource2<TEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse);
		}

		/// <summary>returns the datasource to use in a Linq query when targeting AvailableMatchDateEntity instances in the database.</summary>
		public DataSource2<AvailableMatchDateEntity> AvailableMatchDate {	get { return new DataSource2<AvailableMatchDateEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ExcludeMatchDateEntity instances in the database.</summary>
		public DataSource2<ExcludeMatchDateEntity> ExcludeMatchDate {	get { return new DataSource2<ExcludeMatchDateEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IdentityRoleEntity instances in the database.</summary>
		public DataSource2<IdentityRoleEntity> IdentityRole {	get { return new DataSource2<IdentityRoleEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IdentityRoleClaimEntity instances in the database.</summary>
		public DataSource2<IdentityRoleClaimEntity> IdentityRoleClaim {	get { return new DataSource2<IdentityRoleClaimEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IdentityUserClaimEntity instances in the database.</summary>
		public DataSource2<IdentityUserClaimEntity> IdentityUserClaim {	get { return new DataSource2<IdentityUserClaimEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IdentityUserLoginEntity instances in the database.</summary>
		public DataSource2<IdentityUserLoginEntity> IdentityUserLogin {	get { return new DataSource2<IdentityUserLoginEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IdentityUserRoleEntity instances in the database.</summary>
		public DataSource2<IdentityUserRoleEntity> IdentityUserRole {	get { return new DataSource2<IdentityUserRoleEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting IdentityUserTokenEntity instances in the database.</summary>
		public DataSource2<IdentityUserTokenEntity> IdentityUserToken {	get { return new DataSource2<IdentityUserTokenEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting ManagerOfTeamEntity instances in the database.</summary>
		public DataSource2<ManagerOfTeamEntity> ManagerOfTeam {	get { return new DataSource2<ManagerOfTeamEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting MatchEntity instances in the database.</summary>
		public DataSource2<MatchEntity> Match {	get { return new DataSource2<MatchEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting MatchRuleEntity instances in the database.</summary>
		public DataSource2<MatchRuleEntity> MatchRule {	get { return new DataSource2<MatchRuleEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting PlayerInTeamEntity instances in the database.</summary>
		public DataSource2<PlayerInTeamEntity> PlayerInTeam {	get { return new DataSource2<PlayerInTeamEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting RankingEntity instances in the database.</summary>
		public DataSource2<RankingEntity> Ranking {	get { return new DataSource2<RankingEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting RegistrationEntity instances in the database.</summary>
		public DataSource2<RegistrationEntity> Registration {	get { return new DataSource2<RegistrationEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting RoundEntity instances in the database.</summary>
		public DataSource2<RoundEntity> Round {	get { return new DataSource2<RoundEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting RoundLegEntity instances in the database.</summary>
		public DataSource2<RoundLegEntity> RoundLeg {	get { return new DataSource2<RoundLegEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting RoundTypeEntity instances in the database.</summary>
		public DataSource2<RoundTypeEntity> RoundType {	get { return new DataSource2<RoundTypeEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SetEntity instances in the database.</summary>
		public DataSource2<SetEntity> Set {	get { return new DataSource2<SetEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting SetRuleEntity instances in the database.</summary>
		public DataSource2<SetRuleEntity> SetRule {	get { return new DataSource2<SetRuleEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting TeamEntity instances in the database.</summary>
		public DataSource2<TeamEntity> Team {	get { return new DataSource2<TeamEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting TeamInRoundEntity instances in the database.</summary>
		public DataSource2<TeamInRoundEntity> TeamInRound {	get { return new DataSource2<TeamInRoundEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting TournamentEntity instances in the database.</summary>
		public DataSource2<TournamentEntity> Tournament {	get { return new DataSource2<TournamentEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting TournamentTypeEntity instances in the database.</summary>
		public DataSource2<TournamentTypeEntity> TournamentType {	get { return new DataSource2<TournamentTypeEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting UserEntity instances in the database.</summary>
		public DataSource2<UserEntity> User {	get { return new DataSource2<UserEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		
		/// <summary>returns the datasource to use in a Linq query when targeting VenueEntity instances in the database.</summary>
		public DataSource2<VenueEntity> Venue {	get { return new DataSource2<VenueEntity>(this.AdapterToUse, new ElementCreator(), this.CustomFunctionMappings, this.ContextToUse); } }
		


		/// <summary> Gets / sets the IDataAccessAdapter to use for the queries created with this meta data object.</summary>
		/// <remarks> Be aware that the IDataAccessAdapter object set via this property is kept alive by the LLBLGenProQuery objects created with this meta data
		/// till they go out of scope.</remarks>
		public IDataAccessAdapter AdapterToUse { get; set; }
		
		/// <summary>Gets or sets the custom function mappings to use. These take higher precedence than the ones in the DQE to use</summary>
		public FunctionMappingStore CustomFunctionMappings { get; set; }
		
		/// <summary>Gets or sets the Context instance to use for entity fetches.</summary>
		public Context ContextToUse { get; set; }
	}
}