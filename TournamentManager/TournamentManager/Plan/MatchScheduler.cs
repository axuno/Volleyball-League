using TournamentManager.DAL.EntityClasses;
using TournamentManager.DAL.HelperClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;
using System.Collections.ObjectModel;
using Microsoft.Extensions.Logging;
using TournamentManager.MultiTenancy;

namespace TournamentManager.Plan;

/// <summary>
/// Schedules fixtures for all participants of a tournament or round.
/// If the home participant has no venue or home match date/time defined, it will only have away matches.
/// </summary>
internal class MatchScheduler
{
    private readonly ITenantContext _tenantContext;
    private readonly AppDb _appDb;
    private TournamentEntity _tournament = new();
    private readonly ILoggerFactory _loggerFactory;
    private readonly ILogger<MatchScheduler> _logger;
    private readonly AvailableMatchDates _availableMatchDates;
    private bool _areEntitiesLoaded;

    /// <summary>
    /// CTOR.
    /// </summary>
    /// <param name="tenantContext"></param>
    /// <param name="timeZoneConverter"></param>
    /// <param name="loggerFactory"></param>
    public MatchScheduler(ITenantContext tenantContext,
        Axuno.Tools.DateAndTime.TimeZoneConverter timeZoneConverter, ILoggerFactory loggerFactory)
    {
        _tenantContext = tenantContext;
        _appDb = tenantContext.DbContext.AppDb;
        _availableMatchDates = new AvailableMatchDates(tenantContext, timeZoneConverter, loggerFactory.CreateLogger<AvailableMatchDates>());
        _loggerFactory = loggerFactory;
        _logger = loggerFactory.CreateLogger<MatchScheduler>();
    }

    private async Task LoadEntitiesAsync(CancellationToken cancellationToken)
    {
        if (_areEntitiesLoaded) return;
        _tournament = await _appDb.TournamentRepository.GetTournamentEntityForMatchSchedulerAsync(
            _tenantContext.TournamentContext.MatchPlanTournamentId, cancellationToken) ?? throw new InvalidOperationException($"Could not load entity {nameof(TournamentEntity)}");
        _areEntitiesLoaded = true;
    }

    internal async Task GenerateAvailableMatchDatesAsync(MatchDateClearOption clearMatchDates, RoundEntity round,
        CancellationToken cancellationToken)
    {
        await LoadEntitiesAsync(cancellationToken);
        _ = await _availableMatchDates.ClearAsync(clearMatchDates, cancellationToken);
        await _availableMatchDates.GenerateNewAsync(round, cancellationToken);
    }

    /// <summary>
    /// Generates tournament match combinations for the Round Robin system, 
    /// assigns optimized match dates and stores the matches to
    /// the persistent storage.
    /// </summary>
    public async Task ScheduleFixturesForTournament(bool keepExisting, CancellationToken cancellationToken)
    {
        await LoadEntitiesAsync(cancellationToken);

        if (_appDb.MatchRepository.AnyCompleteMatchesExist(_tenantContext.TournamentContext.MatchPlanTournamentId))
            throw new InvalidOperationException("Completed matches exist for this tournament. Generating fixtures aborted.");

        foreach (var round in _tournament.Rounds)
            await ScheduleFixturesForRound(round, keepExisting, cancellationToken);
    }

    /// <summary>
    /// Generates round match combinations for the Round Robin system, 
    /// assigns optimized match dates and stores the matches to
    /// the persistent storage.
    /// </summary>
    public async Task ScheduleFixturesForRound(RoundEntity round, bool keepExisting,
        CancellationToken cancellationToken)
    {
        await LoadEntitiesAsync(cancellationToken);

        if (_appDb.MatchRepository.AnyCompleteMatchesExist(round))
            throw new InvalidOperationException($"Completed matches exist for round '{round.Id}'. Generating fixtures aborted.");

        var roundMatches = await GetOrCreateRoundMatches(round, keepExisting, cancellationToken);

        await GenerateAvailableMatchDatesAsync(MatchDateClearOption.OnlyAutoGenerated, round, cancellationToken);

        var teams = new Collection<long>(round.TeamCollectionViaTeamInRound.Select(t => t.Id).ToList());

        // now calculate matches for each leg of a round
        foreach (var roundLeg in round.RoundLegs)
        {
            var combinations = CreateCombinations(teams, roundLeg);

            HandleTeamsWithoutHomeMatches(round, combinations);

            /*
             * Assign desired time periods for the round turns.
             * These periods are used later to calculate the match dates for the turns.
             */
            AssignTurnDatePeriods(roundLeg, combinations);
            
            // Team combinations (matches) for each turn can take place at the same time.
            // We assign the match dates based on the turn combinations' TurnDateTimePeriods
            foreach (var turn in combinations.GetTurns())
            {
                SetMatchDates(round, combinations, turn, roundLeg, roundMatches);
            }
        }

        // save the matches for the group
        await _appDb.GenericRepository.SaveEntitiesAsync(roundMatches, true, false, cancellationToken);

        await _availableMatchDates.ClearAsync(MatchDateClearOption.OnlyAutoGenerated, cancellationToken);
    }

    /// <summary>
    /// Sets the match dates for the given <paramref name="combinations"/> in <paramref name="round"/> and <paramref name="roundLeg"/>.
    /// </summary>
    /// <param name="round"></param>
    /// <param name="combinations"></param>
    /// <param name="turn"></param>
    /// <param name="roundLeg"></param>
    /// <param name="roundMatches"></param>
    private void SetMatchDates(RoundEntity round, ParticipantCombinations<long, long> combinations, int turn, RoundLegEntity roundLeg,
        EntityCollection<MatchEntity> roundMatches)
    {
        var selectedTurnCombinations = combinations.GetCombinations(turn).ToList();

        // Get match dates for every combination of a group.
        // Matches in the same turnCombinations can even take at the same time.
        var datesFound = GetMatchDatesForTurn(turn, combinations, roundMatches);
        _logger.LogDebug("Found dates for combination: {dates}",
            string.Join(", ",
                    datesFound.OrderBy(bd => bd?.MatchStartTime).Select(bd => bd?.MatchStartTime.ToShortDateString()))
                .TrimEnd(',', ' '));

        // MatchDates contains calculated dates in the same order as turn combinations,
        // so the index can be used for both.
        for (var index = 0; index < selectedTurnCombinations.Count; index++)
        {
            var combination = selectedTurnCombinations[index];

            // If existing matches were loaded from database, we have to skip such combinations!
            // Note: Home team and guest team of combinations could have been swapped for TeamsWithoutHomeMatches
            if (roundMatches.Any(rm =>
                    (rm.HomeTeamId == combination.Home && rm.GuestTeamId == combination.Guest &&
                     rm.LegSequenceNo == roundLeg.SequenceNo) ||
                    (rm.GuestTeamId == combination.Home && rm.HomeTeamId == combination.Guest &&
                     rm.LegSequenceNo == roundLeg.SequenceNo)))
                continue;

            var match = new MatchEntity
            {
                HomeTeamId = combination.Home,
                GuestTeamId = combination.Guest,
                RefereeId = combination.Referee,
                PlannedStart = datesFound[index] != null ? datesFound[index]!.MatchStartTime : default(DateTime?),
                PlannedEnd = datesFound[index] != null
                    ? datesFound[index]!.MatchStartTime
                        .Add(_tenantContext.TournamentContext.FixtureRuleSet.PlannedDurationOfMatch)
                    : default(DateTime?),
                VenueId = datesFound[index] != null
                    ? datesFound[index]!.VenueId
                    // take over the venue stored in the team entity (may also be null!)
                    : _tournament.Rounds[_tournament.Rounds.FindMatches(RoundFields.Id == roundLeg.RoundId).First()]
                        .TeamCollectionViaTeamInRound.First(t => t.Id == combination.Home).VenueId,
                RoundId = round.Id,
                IsComplete = false,
                LegSequenceNo = roundLeg.SequenceNo,
                ChangeSerial = 0,
                Remarks = string.Empty
            };

            roundMatches.Add(match);
            _logger.LogDebug("Fixture completed: {HomeTeam} - {GuestTeam}: {PlannedStart}", match.HomeTeamId,
                match.GuestTeamId, match.PlannedStart);
        }
    }

    /// <summary>
    /// Creates round-robin combinations for the given <paramref name="teams"/> and <paramref name="roundLeg"/>.
    /// </summary>
    /// <param name="teams"></param>
    /// <param name="roundLeg"></param>
    /// <returns>The round-robin combinations for the given <paramref name="teams"></paramref> and <paramref name="roundLeg"/>.</returns>
    private ParticipantCombinations<long, long> CreateCombinations(Collection<long> teams, RoundLegEntity roundLeg)
    {
        // build up match combinations for the teams of round
        var matchCreator = new MatchCreator<long, long>(_tenantContext, _loggerFactory.CreateLogger<MatchCreator<long, long>>());
        // TODO: RefereeType should be configurable via ITenantContext
        var combinations =
            matchCreator.SetParticipants(teams).GetCombinations(RefereeType.Home,
                roundLeg.SequenceNo % 2 == 1 ? LegType.First : LegType.Return);
        return combinations;
    }

    /// <summary>
    /// Gets the existing matches for the given <paramref name="round"/>.
    /// If <paramref name="keepExistingMatches"/> is <c>true</c>, the existing matches are returned.
    /// If <paramref name="keepExistingMatches"/> is <c>false</c>, the existing matches are deleted and an empty collection is returned.
    /// </summary>
    /// <param name="round"></param>
    /// <param name="keepExistingMatches"></param>
    /// <param name="cancellationToken"></param>
    /// <returns>The existing matches for the given <paramref name="round"/>, depending on <paramref name="keepExistingMatches"/>.</returns>
    private async Task<EntityCollection<MatchEntity>> GetOrCreateRoundMatches(RoundEntity round, bool keepExistingMatches, CancellationToken cancellationToken)
    {
        EntityCollection<MatchEntity> roundMatches;

        if (keepExistingMatches)
        {
            // load existing matches from storage
            roundMatches = _appDb.MatchRepository.GetMatches(round);
        }
        else
        {
            roundMatches = new EntityCollection<MatchEntity>();
            // delete existing matches from storage
            var bucket = new RelationPredicateBucket(new PredicateExpression(
                new FieldCompareRangePredicate(MatchFields.RoundId, null, false, new[] { round.Id })));
            await _appDb.GenericRepository.DeleteEntitiesDirectlyAsync(typeof(MatchEntity), bucket,
                cancellationToken);
        }

        return roundMatches;
    }

    /// <summary>
    /// Special treatment for teams which do not have home matches (no venue or no home weekday or time assigned):
    /// Swap home and guest team (keep referee unchanged)
    /// </summary>
    /// <param name="round">The <see cref="RoundEntity"/> the <see cref="ParticipantCombinations{TP,TR}"/> belong to.</param>
    /// <param name="combinations">The combinations for the <see cref="RoundEntity"/>.</param>
    private void HandleTeamsWithoutHomeMatches(RoundEntity round, ParticipantCombinations<long, long> combinations)
    {
        var teamsWithoutHomeMatches = GetTeamsWithoutHomeMatches(round).ToList();

        foreach (var combination in combinations)
        {
            if (!teamsWithoutHomeMatches.Contains(combination.Home)) continue;

            _logger.LogDebug("Team cannot have home matches - {TeamId}. Swap with away team.", combination.Home);

            // swap home and guest team (keep referee unchanged)
            combination.SwapHomeGuest();
        }
    }

    /// <summary>
    /// Gets the match dates that are occupied (i.e. not available) for
    /// the given <paramref name="combination"/> and <paramref name="matches"/>.
    /// </summary>
    /// <param name="combination"></param>
    /// <param name="matches"></param>
    /// <returns>The match dates that are occupied (i.e. not available).</returns>
    private static List<DateTime> GetOccupiedMatchDates(ParticipantCombination<long, long> combination,
        IEnumerable<MatchEntity> matches)
    {
        return (from match in matches
            where
                match.PlannedStart.HasValue && match.PlannedEnd.HasValue &&
                (match.HomeTeamId == combination.Home || match.HomeTeamId == combination.Guest ||
                 match.GuestTeamId == combination.Home || match.GuestTeamId == combination.Guest)
            select match.PlannedStart!.Value.Date).ToList();
    }

    /// <summary>
    /// Gets a lists of available match dates for the given <paramref name="turn"/> of the <paramref name="combinations"/>.
    /// </summary>
    /// <param name="turn"></param>
    /// <param name="combinations"></param>
    /// <param name="roundMatches"></param>
    /// <returns>A lists of available match dates.</returns>
    private List<AvailableMatchDateEntity?> GetMatchDatesForTurn(int turn,
        ParticipantCombinations<long, long> combinations, EntityCollection<MatchEntity> roundMatches)
    {
        var turnCombinations = combinations.GetCombinations(turn).ToList();
        var turnCombinationsPeriod = combinations.TurnDateTimePeriods[turn]!.Value;

        // These are possible date alternatives per combination:
        var matchDates = new List<List<AvailableMatchDateEntity>>();

        for (var index = 0; index < turnCombinations.Count; index++)
        {
            var combination = turnCombinations[index];

            var availableDatesForCombination = _availableMatchDates.GetGeneratedAndManualAvailableMatchDates(combination.Home,
                turnCombinationsPeriod, GetOccupiedMatchDates(combination, roundMatches));
            // initialize MinTimeDiff for the whole list
            availableDatesForCombination.ForEach(amd => amd.MinTimeDiff = TimeSpan.MaxValue);

            // Get the last match for at least one of the teams, if any
            var lastMatchOfCombination = roundMatches.OrderBy(gm => gm.PlannedStart).LastOrDefault(gm =>
                gm.HomeTeamId == combination.Home || gm.GuestTeamId == combination.Guest);
            if (lastMatchOfCombination != null)
            {
                _logger.LogDebug("Last match date for home team '{homeTeam}' or guest team '{guestTeam}' is '{plannedStart}'", combination.Home, combination.Guest, lastMatchOfCombination.PlannedStart?.ToShortDateString() ?? "none");
            }
            else
            {
                _logger.LogDebug("No matches yet for home team '{homeTeam}' or guest team '{guestTeam}'", combination.Home, combination.Guest);
            }

            // If no dates could be found, the date will be left blank.
            if (availableDatesForCombination.Count == 0)
            {
                _logger.LogDebug("No free dates {from} - {to} found for {home } - {guest}: {period} * Will be left blank.", turnCombinationsPeriod.Start, turnCombinationsPeriod.End, combination.Home, combination.Guest, turnCombinationsPeriod);
            }
            
            matchDates.Add(availableDatesForCombination);
        }

        // Will contain the resulting "best" match dates
        var matchDatesPerCombination = new List<AvailableMatchDateEntity?>();

        // we can't proceed without any match dates found
        if (matchDates.Count == 0) return matchDatesPerCombination;

        // only 1 match date found, so optimization is not possible
        // and the following "i-loop" will be skipped
        if (matchDates.Count == 1)
        {
            matchDatesPerCombination.Add(matchDates[0][0]);
            return matchDatesPerCombination;
        }

        FindBestDate(matchDates, matchDatesPerCombination);

        return matchDatesPerCombination;
    }

    /// <summary>
    /// Finds the best match dates from a list of available match dates for each combination.
    /// </summary>
    /// <param name="availableMatchDates"></param>
    /// <param name="bestMatchDatesPerCombination"></param>
    private static void FindBestDate(List<List<AvailableMatchDateEntity>> availableMatchDates, List<AvailableMatchDateEntity?> bestMatchDatesPerCombination)
    {
        // Cross-compute the number of dates between between matches of turn.
        // Goal: found match dates should be as close together as possible

        // start with 1st dates, end with last but one dates
        for (var i = 0; i < availableMatchDates.Count - 1; i++)
        {
            // start with 2nd dates, end with last dates
            for (var j = 1; j < availableMatchDates.Count; j++)
            {
                // compare each date in the first list...
                foreach (var dates1 in availableMatchDates[i])
                {
                    // ... with the dates in the second list
                    foreach (var dates2 in availableMatchDates[j])
                    {
                        var daysDiff = Math.Abs((dates1.MatchStartTime.Date - dates2.MatchStartTime.Date).Days);

                        // save minimum dates found for later reference
                        if (daysDiff < dates1.MinTimeDiff.Days)
                            dates1.MinTimeDiff = new TimeSpan(daysDiff, 0, 0, 0);

                        if (daysDiff < dates2.MinTimeDiff.Days)
                            dates2.MinTimeDiff = new TimeSpan(daysDiff, 0, 0, 0);
                    } // end dates2
                } // end dates1
            } // end j

            // Get the date that has least distance to smallest date in other turn(s)
            // Note: If no match dates could be determined for a team, bestDate will be null.
            var bestDate = availableMatchDates[i].Where(md => md.MinTimeDiff == availableMatchDates[i].Min(d => d.MinTimeDiff))
                .OrderBy(md => md.MinTimeDiff).FirstOrDefault();
            bestMatchDatesPerCombination.Add(bestDate);

            // process the last combination

            // in case comparisons took place,
            // now the "j-loop" group is not processed yet:
            if (i + 1 >= availableMatchDates.Count - 1)
            {
                bestDate = availableMatchDates[^1].Where(md => md.MinTimeDiff == availableMatchDates[^1].Min(d => d.MinTimeDiff))
                    .MinBy(md => md.MinTimeDiff);
                // the last "j-increment" is always the same as "matchDates[^1]" (loop condition)
                bestMatchDatesPerCombination.Add(bestDate);
            }
        } // end i
    }

    /// <summary>
    /// Desired <see cref="DateTimePeriod"/>s are assigned to round turns mathematically,
    /// spreading match dates equally across the <see cref="RoundLegEntity"/>'s <see cref="RoundLegEntity.StartDateTime"/> and <see cref="RoundLegEntity.EndDateTime"/>.
    /// These periods are used later to calculate the match dates for the turns.
    /// </summary>
    /// <param name="roundLeg">The <see cref="RoundLegEntity"/> to use.</param>
    /// <param name="combinations">The combinations where the <see cref="ParticipantCombinations{TP,TR}.TurnDateTimePeriods"/> will be filled.</param>
    /// <exception cref="InvalidOperationException">Throws if not all round turns got a date period assigned.</exception>
    private void AssignTurnDatePeriods(RoundLegEntity roundLeg,
        ParticipantCombinations<long, long> combinations)
    {
        var allMatchDaysOfRound =
            _availableMatchDates
                .GetGeneratedAndManualAvailableMatchDateDays(roundLeg);

        var periodDaysCount = allMatchDaysOfRound.Count / (combinations.GetTurns().Count() + 1);

        _logger.LogDebug("*** Round: {roundName} - RoundLeg: {legDescription}\n", roundLeg.Round.Name, roundLeg.Description);

        // Initialize the dictionary with the turns and date empty periods
        combinations.TurnDateTimePeriods.Clear();
        foreach (var turn in combinations.GetTurns())
        {
            combinations.TurnDateTimePeriods.Add(turn, null);
        }

        var start = 0;
        var index = 0;
        while (start < allMatchDaysOfRound.Count && index < combinations.TurnDateTimePeriods.Count)
        {
            //TODO: There could be a remainder of days because of integer division!
            var end = start + periodDaysCount < allMatchDaysOfRound.Count
                ? start + periodDaysCount
                : allMatchDaysOfRound.Count - 1;

            // Get the key of the dictionary entry at the current index
            var key = combinations.TurnDateTimePeriods.Keys.ElementAt(index);
            combinations.TurnDateTimePeriods[key] =
                new DateTimePeriod(allMatchDaysOfRound[start].Date, allMatchDaysOfRound[end].Date);

            _logger.LogDebug("Turn #{turn} date period: From={from}, To={to}, {days} days",
                key, combinations.TurnDateTimePeriods[key]?.Start?.ToShortDateString(),
                combinations.TurnDateTimePeriods[key]?.End?.ToShortDateString(),
                (combinations.TurnDateTimePeriods[key]?.End - combinations.TurnDateTimePeriods[key]?.Start)
                ?.Days);

            start = end + 1;
            index++;
        }

        if (combinations.TurnDateTimePeriods.Values.Any(p => p is null))
            throw new InvalidOperationException(
                "Not all round turns got a date period assigned. Probably not enough dates available for assignment.");
    }

    /// <summary>
    /// Gets <see cref="TeamEntity.Id"/>s for the <param name="round"></param> where no home venue or no home match time set for a team.
    /// </summary>
    private static IEnumerable<long> GetTeamsWithoutHomeMatches(RoundEntity round)
    {
        foreach (var team in round.TeamCollectionViaTeamInRound)
        {
            if (team.VenueId == null || team.MatchTime == null || team.MatchDayOfWeek == null)
            {
                yield return team.Id;
            }
        }
    }
}
