@using System.Globalization
@using League.Components
@using League.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@using TournamentManager.MultiTenancy
@inject ITenantContext TenantContext
@inject IViewLocalizer Localizer
@model League.Models.MatchViewModels.EditFixtureViewModel
@{
    if (Model.Tournament == null || Model.PlannedMatch == null) return;

    ViewData["Title"] = Localizer["Edit Fixture"].Value + " - " + Model.Tournament.Name;
    var tenantUrlSegment = TenantContext.SiteContext.UrlSegmentValue;
}
<div class="mb-0 pb-1">
    <h2 class="h2">@ViewData["Title"]</h2>
    <hr />
    <form asp-controller="@nameof(Match)" asp-action="@nameof(Match.EditFixture)" asp-route-tenant="@tenantUrlSegment" method="post" role="form">
        <site-validation-summary show="All" warning="@Model.IsWarning"></site-validation-summary>
        <input name="IsValid" type="hidden" value="@ViewData.ModelState.IsValid.ToString()" />@* needed for unobtrusive validation *@
        <input hidden="hidden" asp-for="Id" />
        <input hidden="hidden" asp-for="Hash" />
        @if (Model.IsWarning)
        {
            <div class="p-1 col-12 col-md-6 border border-warning rounded">
                <div class="form-check">
                    <input asp-for="OverrideWarnings" type="checkbox" class="form-check-input">
                    <label class="form-check-label text-warning mt-0" asp-for="OverrideWarnings"></label>
                </div>
            </div>
        }
        <div class="row">
            <div class="mb-3 col-12 col-md-6">
                <label class="form-label">@Localizer["Opponents"]</label>
                <div class="fw-bold">@Model.PlannedMatch.HomeTeamNameForRound : @Model.PlannedMatch.GuestTeamNameForRound</div>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col-12 col-md-6">
                <label asp-for="MatchDate" class="form-label"></label>
                <div id="@(Model.MatchDate)-c" class="input-group" data-input-type="date" data-td-target-input="nearest" data-td-target-toggle="nearest">
                    <input asp-for="MatchDate" type="text" asp-format="{0:@(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)}" autofocus autocomplete="off" class="form-control" aria-describedby="@nameof(Model.MatchDate)HelpBlock" />
                    <span class="input-group-text" data-td-target="@nameof(Model.MatchDate)-c" data-td-toggle="datetimepicker">
                        <i class="far fa-calendar-alt"></i>
                    </span>
                </div>
                <small id="@nameof(Model.MatchDate)HelpBlock" class="d-block form-text text-muted">
                    @Localizer["Date format"]: @(Localizer[CultureInfo.CurrentUICulture.DateTimeFormat.ShortDatePattern.ToUpperInvariant()])
                </small>
                <span asp-validation-for="MatchDate" class="text-danger"></span>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col-12 col-md-6">
                <label asp-for="MatchTime" class="form-label"></label>
                <div id="@(Model.MatchTime)-c" class="input-group" data-input-type="time" data-td-target-input="nearest" data-td-target-toggle="nearest">
                    <input asp-for="MatchTime" type="text" asp-format="{0:@(CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern)}" autocomplete="off" class="form-control" aria-describedby="@nameof(Model.MatchTime)HelpBlock" />
                    <span class="input-group-text" data-td-target="@nameof(Model.MatchTime)-c" data-td-toggle="datetimepicker">
                        <i class="far fa-clock"></i>
                    </span>
                </div>
                <small id="@nameof(Model.MatchTime)HelpBlock" class="d-block form-text text-muted">
                    @Localizer["Time format"]: @(CultureInfo.CurrentUICulture.DateTimeFormat.ShortTimePattern.ToUpperInvariant().Replace("TT", "AM/PM"))
                </small>
                <span asp-validation-for="MatchTime" class="text-danger"></span>
            </div>
        </div>
        <div id="venue-picker">
            <div class="row">
                <div class="mb-3 col-12 col-md-6">
                    <label asp-for="VenueId" class="form-label"></label>
                    <div class="input-group">
                        <input type="hidden" asp-for="VenueId" />
                        <div id="venue-text" class="form-control overflow-hidden" style="height:auto" data-bs-target="#select-venue" data-bs-toggle="modal">
                            @string.Join(", ", Model.PlannedMatch.VenueName, Model.PlannedMatch.VenueExtension).TrimEnd(',', ' ')
                        </div>
                        <span class="input-group-text" data-bs-target="#select-venue" data-bs-toggle="modal">
                            <i class="fas fa-edit"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col-12 col-md-6 mt-2">
                <a asp-controller="@nameof(Match)" asp-action="@nameof(Match.Fixtures)" asp-route-tenant="@tenantUrlSegment" class="btn btn-lg btn-secondary">@Localizer["Cancel"]</a>
                <button type="submit" class="btn btn-lg btn-primary">@Localizer["Save"]</button>
            </div>
        </div>
    </form>
</div>
<modal id="select-venue" title="@Localizer["Please select a venue"].Value" dialog-class="modal-lg">
    <modal-body>
        <div>
            @{ ValueTuple<long, IList<long>, VenueSelectorComponentModel.Criteria, VenueSelectorComponentModel.Criteria, long?> m = (TenantContext.TournamentContext.MatchPlanTournamentId, new List<long>(new[] { Model.PlannedMatch.HomeTeamId, Model.PlannedMatch.GuestTeamId }), VenueSelectorComponentModel.Criteria.VenuesOfTeams | VenueSelectorComponentModel.Criteria.Active, VenueSelectorComponentModel.Criteria.VenuesOfTeams | VenueSelectorComponentModel.Criteria.Active, -1);}
            @(await Component.InvokeAsync<VenueSelector>(m))
        </div>
    </modal-body>
</modal>
@section styles
{
    <link rel="stylesheet" href="~/lib/tempus-dominus/tempus-dominus.min.css" asp-append-version="true"/>
    <style type="text/css">
        #venue-list tbody tr {
            border-bottom: solid 2px lightgray
        }

        #venue-list thead {
            background-color: lightgray
        }

        #venue-list td {
            cursor: pointer;
        }

        #venue-picker .input-group {
            cursor: pointer;
        }

        /* Start: Change checkbox color */
        .border-warning > .form-check > input[type=checkbox]:checked {
            background-color: var(--bs-warning);
        }

        .border-warning > .form-check > input[type=checkbox] {
            border: 2px solid var(--bs-warning);
            background-color: transparent;
        }
        /* End: Change checkbox color */
    </style>
}
@section scripts
{
    <script type="text/javascript" src="~/lib/tempus-dominus/tempus-dominus.all.min.js" asp-append-version="true"></script>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', OnDOMContentLoaded, false);
        function OnDOMContentLoaded() {

            const locale = '@(CultureInfo.CurrentCulture.ToString())';
            const parentLocale = '@(CultureInfo.CurrentCulture.Parent.TwoLetterISOLanguageName)';
            const hourCycle = '@(CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern.Contains("t") ? 12 : 24)';

            const tdFactory = new Site.TempusDominusFactory(locale, parentLocale, hourCycle, false);
            [].forEach.call(document.querySelectorAll('[data-input-type="date"]'), function (el) {
                tdFactory.CreateCalendarPicker(el, '@(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)');
            });
            [].forEach.call(document.querySelectorAll('[data-input-type="time"]'), function (el) {
                tdFactory.CreateTimePicker(el, '@(CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern.Replace("tt", "T"))');
            });

            document.getElementById('select-venue').addEventListener('show.bs.modal', function(e) {
                document.querySelectorAll('#select-venue tr[data-venue-id]').forEach(function(r) {
                    if (r.getAttribute('data-venue-id') === document.getElementById('@Html.IdFor(m => m.VenueId)').value) {
                        r.querySelector('td:first-child').innerHTML = '<i class="fas fa-check"></i>';
                    } else {
                        r.querySelector('td:first-child').innerHTML = '';
                    }
                });
            });

            document.querySelectorAll('#select-venue tr[data-venue-id]').forEach(function(r) {
                r.addEventListener('click', function() {
                    document.getElementById('@Html.IdFor(m => m.VenueId)').value = r.getAttribute('data-venue-id');
                    document.getElementById('venue-text').textContent = r.querySelector('td:nth-child(2)').textContent;
                    bootstrap.Modal.getOrCreateInstance('#select-venue').hide();
                });
            });

            document.getElementById('@nameof(Model.MatchDate)').addEventListener('change', function() {
                if (this.value === '') {
                    document.getElementById('Model.MatchTime').value = '';
                }
            });
        }
    </script>
}