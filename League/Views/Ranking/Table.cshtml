@using League.BackgroundTasks
@using League.Views
@using Microsoft.AspNetCore.Mvc.Localization
@using TournamentManager.Ranking
@using System.Drawing
@inject IViewLocalizer Localizer
@inject Axuno.Tools.DateAndTime.TimeZoneConverter TimeZoneConverter
@model League.Models.RankingViewModels.RankingListModel
@{
    ViewData["Title"] = Localizer["Table"].Value + " - " + Model.Tournament.Name;
    if (Model.RankingList.Count == 0)
    {
        <div class="mb-0 pb-1">
            <h2 class="h2">@ViewData["Title"]</h2>
            <site-alert type="Info" icon="fas fa-calendar-times" icon-size-class="fa-3x">
                <h4 class="h4">@Localizer["There are no tables at this time"].</h4>
            </site-alert>
        </div>

        return;
    }

    var activeRoundId = Model.ActiveRoundId ?? 0;
    var rounds = Model.RankingList.GroupBy(m => m.RoundName, (key, m) => new { RoundName = key, RoundId = m.First().RoundId, RoundDescription = m.First().RoundDescription, RoundTypeDescription = m.First().RoundTypeDescription }).ToList();
    var useRecentRoundCookie = !(Model.ActiveRoundId.HasValue && rounds.Any(r => r.RoundId == Model.ActiveRoundId));
    if (useRecentRoundCookie) { activeRoundId = rounds.FirstOrDefault()?.RoundId ?? 0; }
}
@functions {

    System.Drawing.Color ToColor(uint argb)
    {
        return System.Drawing.Color.FromArgb((byte) ((argb & -16777216) >> 0x18),
            (byte) ((argb & 0xff0000) >> 0x10),
            (byte) ((argb & 0xff00) >> 8),
            (byte) (argb & 0xff));
    }
}
<div class="mb-0 pb-1">
    <h2 class="h2">@ViewData["Title"]</h2>
    <hr class="mb-4" />

    <ul class="nav nav-tabs" id="round-tabs" role="tablist">
        @foreach (var r in rounds)
        {
            <li class="nav-item">
                <a class="nav-link py-1@{if (r.RoundId == activeRoundId){<text> active</text>}}" id="tab-link-@(r.RoundId)" data-toggle="tab" href="#tab-@(r.RoundId)" role="tab" aria-controls="@r.RoundDescription" aria-selected="@(r.RoundId == activeRoundId ? "true" : "false")">@r.RoundDescription</a>
            </li>
        }
    </ul>
    <div class="tab-content mt-1" id="ranking-table">
        @foreach (var r in rounds)
        {
            <div class="tab-pane@{if (r.RoundId == activeRoundId) {<text> show active</text>}}" id="tab-@(r.RoundId)" role="tabpanel" aria-labelledby="@r.RoundDescription-tab">
                <div class="text-success">@r.RoundTypeDescription</div>
                <div class="rounded table-responsive">
                    <table class="table table-sm table-light table-bordered table">
                        <thead class="rounded">
                            <tr>
                                <th class="rank">@Localizer["Rank"]</th>
                                <th class="team">
                                    <div class="text-truncate">@Localizer["Team"]</div>
                                    <div class="text-truncate">@Localizer["Club"]</div>
                                </th>
                                <th class="result">
                                    <div>@Localizer["Match"]</div>
                                    <div>@Localizer["Pts."]</div>
                                </th>
                                <th class="result">
                                    <div>@Localizer["Set"]</div>
                                    <div>@Localizer["Pts."]</div>
                                </th>
                                <th class="result">
                                    <div>@Localizer["Ball"]</div>
                                    <div>@Localizer["Pts."]</div>
                                </th>
                                <th class="matches font-weight-light" data-toggle="tooltip" title="@Localizer["Matches played / to play"]">
                                    <i class="fas fa-circle"></i>/<i class="far fa-circle"></i>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var rankBgColors = RankingChart.LineColors;
                                var rankingList = Model.RankingList.Where(m => m.RoundId == r.RoundId).OrderBy(m => m.Rank).ToList();
                                for (var i = 0; i < rankingList.Count; i++)
                                {
                                    var bgColor = i < rankBgColors.Count ? ToColor(rankBgColors[i]) : Color.Gray;
                                    var rankRow = rankingList[i];
                                    <tr>
                                        <td class="rank">@rankRow.Rank <span class="badge badge-pill" style="font-size: .7rem; background-color: rgba(@bgColor.R, @bgColor.G, @bgColor.B, @bgColor.A)">&nbsp;</span></td>
                                        <td class="team">
                                            <div class="text-truncate">@rankRow.TeamNameForRound</div>
                                            <div class="text-truncate">@rankRow.ClubName</div>
                                        </td>
                                        <td class="result">@rankRow.MatchPointsWon:@rankRow.MatchPointsLost</td>
                                        <td class="result">@rankRow.SetPointsWon:@rankRow.SetPointsLost</td>
                                        <td class="result">@rankRow.BallPointsWon:@rankRow.BallPointsLost</td>
                                        <td class="matches">
                                            <div>@rankRow.MatchesPlayed/@rankRow.MatchesToPlay</div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                @{
                    var zonedMaxModifiedOn = TimeZoneConverter.ToZonedTime(
                        Model.RankingList.Where(m => m.RoundId == r.RoundId).Max(m => m.ModifiedOn));
                    var zonedMaxMatchDate = TimeZoneConverter.ToZonedTime(
                        Model.RankingList.Where(m => m.RoundId == r.RoundId).Max(m => m.ValuationDate));
                }
                @{
                    if (Model.ChartFileInfos.ContainsKey(r.RoundId))
                    {
                        <figure>
                            <h5 class="h5">@Localizer["Ranking History"]</h5>
                            <img src="@Url.Content($"~/{RankingUpdateTask.RankingImageFolder}/{Model.ChartFileInfos[r.RoundId].Name}")" class="img-fluid" alt="@Localizer["Ranking History"] @r.RoundDescription"/>
                            <figcaption class="small">R = @Localizer["Rank"], MD = @Localizer["Match Days"] (@Localizer["until"] @zonedMaxMatchDate.DateTimeOffset.DateTime.ToShortDateString())</figcaption>
                        </figure>
                    }
                }

                <div class="text-muted small">
                    @Localizer["Table created on"]: @zonedMaxModifiedOn.DateTimeOffset.DateTime.ToShortDateString() @zonedMaxModifiedOn.DateTimeOffset.DateTime.ToLongTimeString() @zonedMaxModifiedOn.Abbreviation
                </div>
            </div>
        }
    </div>
</div>
@section styles
{
    @{
        var rankColWidth = 10;
        var matchesColWidth = 10;
        var resultColWidth = 10;
        var teamColWidth = 100 - rankColWidth - matchesColWidth - 3 * resultColWidth;
    }
    <style type="text/css">
        #round-tabs .nav-link:not(.active) {border:solid 1px lightgray;}
        #ranking-table table tbody tr {border-bottom: solid 2px lightgray}
        #ranking-table table thead {background-color: lightgray}
        .rank { width: @(rankColWidth)%; text-align: center}
        .matches { width: @(matchesColWidth)%; text-align: center; white-space: nowrap;}
        .team {width:@(teamColWidth)%}
        .team > div {max-width: calc(45 * 1vw)}
        .result { width: @(resultColWidth)%; text-align: center}
        .tooltip { white-space:pre-wrap; } @* will recognize \n for new lines *@
    </style>
}
@section scripts
{
    <script type="text/javascript">
        //<![CDATA[
        var mostRecentRoundCookieName = '@CookieNames.MostRecentRound';
        var useRecentRoundCookie = @useRecentRoundCookie.ToString().ToLowerInvariant();
        Cookies = window.Cookies; @* js-cookies.js *@
        $(document).ready(function() {
            $('[data-toggle="tooltip"]').tooltip();
            @* Try to set the active tab from a cookie *@
            if (useRecentRoundCookie) {
                var $activeRoundFromCookie = Cookies.get(mostRecentRoundCookieName);
                var $tabLink = $('#tab-link-' + $activeRoundFromCookie);
                if ($activeRoundFromCookie !== undefined && $tabLink.length) {
                    $tabLink.tab('show');
                } else {
                    $('#round-tabs li:first-child a').tab('show');
                }
            }
            $('a[data-toggle="tab"]').on('shown.bs.tab',
                function(e) {
                    var id = e.target.id.replace('tab-link-', ''); // newly activated tab with round id
                    Cookies.set(mostRecentRoundCookieName,
                        id,
                        { expires: 365, path: '/' + e.target.pathname.split('/')[1] });
                });
        });
        //]]>
    </script>
}
