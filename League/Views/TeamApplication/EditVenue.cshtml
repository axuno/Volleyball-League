@using System.Globalization
@using League.Components
@using League.Controllers
@using Microsoft.AspNetCore.Mvc.Localization
@using TournamentManager.MultiTenancy
@inject IViewLocalizer Localizer
@inject ITenantContext TenantContext
@model League.Models.VenueViewModels.VenueEditModel
@{  ViewData["Title"] = Localizer["Team Registration"].Value + " - " + ViewData["TournamentName"];
    var tenantUrlSegment = TenantContext.SiteContext.UrlSegmentValue;
}
<div class="mb-0 pb-1">
    <h2 class="h2">@ViewData["Title"]</h2>
    <hr />
    @* Form with only 1 input field can be submitted with enter key. So we have to prevent default submit behavior and trigger a click on saveBtn *@
    <form asp-controller="@nameof(TeamApplication)" asp-action="@nameof(TeamApplication.EditVenue)" asp-route-tenant="@tenantUrlSegment" method="post" role="form">
        <site-validation-summary show="All" warning="@Model.IsWarning" unique-error-text="true"></site-validation-summary>
        <input asp-for="TeamId" type="hidden" />
        <input asp-for="Hash" type="hidden" />
        <input asp-for="ReturnUrl" type="hidden" />
        <input name="IsValid" type="hidden" value="@ViewData.ModelState.IsValid.ToString()" />
        @if (Model.VenuesForDistance.Any())
        {
            <button class="btn btn-warning btn-sm mb-2" data-bs-target="#show-vicinity-venues" data-bs-toggle="modal" onclick="event.preventDefault()">
                @Localizer["Show vicinity venues"]
            </button>
        }
        @if (Model.IsWarning)
        {
            <div class="p-1 mb-2 col-12 col-md-6 border border-warning rounded mb-3">
                <div class="form-check form-check-warning ms-1">
                    <input asp-for="OverrideWarnings" type="checkbox" class="form-check-input">
                    <label class="form-check-label text-warning mt-0" asp-for="OverrideWarnings"></label>
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(Model.ForTeamName))
        {
            <div class="row mb-2">
                <div class="col-12">
                    <h4 class="h4">@(Model.Venue.IsNew ? Localizer["New venue for team"].Value : Localizer["Venue for team"].Value) <span class="fw-bold">@Model.ForTeamName</span></h4>
                </div>
            </div>
        }
        @(await Component.InvokeAsync<VenueEditor>(Model.Venue))
        @if (Model.TeamsUsingTheVenue.Any())
        {
            <div class="row mb-2">
                <div class="col-12 col-md-6">
                    <div class="border border-warning rounded p-2">
                        <div>@Localizer["Changes will have effect for the following teams using this venue"]:</div>
                        @foreach (var teamName in Model.TeamsUsingTheVenue)
                        {
                            <span class="badge bg-secondary d-inline-block me-2">@teamName</span>
                        }
                    </div>
                </div>
            </div>
        }
        <div class="row">
            <div class="mb-3 col-12 col-md-6 mt-2">
                <a asp-controller="@nameof(TeamApplication)" asp-action="@nameof(TeamApplication.SelectVenue)" asp-route-tenant="@tenantUrlSegment" class="btn btn-secondary">@Localizer["Back"]</a>
                <button type="submit" class="btn btn-primary">@Localizer["Continue"]</button>
            </div>
        </div>
    </form>
</div>
<modal id="show-vicinity-venues" title="@Localizer["Venues in direct vicinity"].Value" dialog-class="modal-xl">
    <modal-body>
        <div class="table-responsive">
            @* Wrapping this way makes tables responsive and 100% width *@
        <table id="venue-list" class="table table-sm table-light">
            <thead class="rounded">
                <tr>
                    <th>@Localizer["Name"]</th>
                    <th>@Localizer["Address"]</th>
                    <th style="text-align: right">@Localizer["Distance"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var v in Model.VenuesForDistance)
                {
                    <tr>
                        <td>@v.Name<br />@v.Extension</td>
                        <td>@v.City<br />@v.Street</td>
                        <td style="text-align: right">@((int) (Math.Round(v.Distance, 1) * 1000))m</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</modal-body>
</modal>
@section styles
{
    <style type="text/css">
        #venue-list tbody tr {
            border-bottom: solid 2px lightgray
        }

        #venue-list thead {
            background-color: lightgray
        }

        /* Start: Change checkbox color */
        .form-check.form-check-warning > input[type=checkbox]:checked {
            background-color: var(--bs-warning);
        }

        .form-check.form-check-warning > input[type=checkbox] {
            border: 2px solid var(--bs-warning);
            background-color: transparent;
        }
        /* End: Change checkbox color */
    </style>
}
