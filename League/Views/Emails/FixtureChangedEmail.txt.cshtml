@inject IViewLocalizer Localizer
@inject IOptions<DataProtectionTokenProviderOptions> TokenProviderOptions
@inject Axuno.Tools.DateAndTime.TimeZoneConverter TimeZoneConverter
@{
    Layout = null;
}
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options
@*ValueTuple*@
@model (ClaimsPrincipal ChangedByUser, long MatchId, TournamentManager.Data.OrganizationContext OrganizationContext, TournamentManager.DAL.TypedViewClasses.PlannedMatchRow Fixture)
@{
    string FmtDate(DateTime? matchDate)
    {
        var zonedTime = TimeZoneConverter.ToZonedTime(matchDate);
        return zonedTime != null ? zonedTime.DateTimeOffset.DateTime.ToString("ddd, ") + zonedTime.DateTimeOffset.DateTime.ToShortDateString() + " - " + zonedTime.DateTimeOffset.DateTime.ToShortTimeString() + " " + zonedTime.Abbreviation : Localizer["unknown"].Value;
    }
    string GetUsername()
    {
        if (Model.ChangedByUser.HasClaim(c => c.Type == ClaimTypes.GivenName) && Model.ChangedByUser.HasClaim(c => c.Type == ClaimTypes.Surname))
        {
            return Model.ChangedByUser.Claims.First(c => c.Type == ClaimTypes.GivenName).Value + " " + Model.ChangedByUser.Claims.First(c => c.Type == ClaimTypes.Surname).Value;
        }
        return null;
    }

    var MatchDateLabel = new[] { Localizer["Original fixture date"].Value, Localizer["Replacement fixture date"].Value };
    var VenueLabel = new[] { Localizer["Original venue"].Value, Localizer["New venue"].Value };
}
@Html.Raw(Model.OrganizationContext.Name) (@Html.Raw(Model.Fixture.RoundDescription)) @Html.Raw(Environment.NewLine)
@Html.Raw(Model.Fixture.HomeTeamNameForRound) : @Html.Raw(Model.Fixture.GuestTeamNameForRound)
@Html.Raw(Environment.NewLine)
@if (Model.Fixture.OrigPlannedStart.HasValue)
{
    var maxLength = MatchDateLabel.Max(mdl => mdl.Length);
    @Html.Raw(MatchDateLabel[0].PadRight(maxLength, '.'))@(": ") @Html.Raw(FmtDate(Model.Fixture.OrigPlannedStart))
    @Html.Raw(Environment.NewLine)
    @Html.Raw(MatchDateLabel[1].PadRight(maxLength, '.'))@(": ") @Html.Raw(FmtDate(Model.Fixture.PlannedStart))
    @Html.Raw(Environment.NewLine)@Html.Raw(Environment.NewLine)
}
else
{
    @Html.Raw(MatchDateLabel[0])@(": ")@Html.Raw(FmtDate(Model.Fixture.PlannedStart))
    @Html.Raw(Environment.NewLine)@Html.Raw(Environment.NewLine)
}
@if (Model.Fixture.OrigVenueId.HasValue)
{
    var maxLength = VenueLabel.Max(vl => vl.Length);
    @Html.Raw(VenueLabel[0].PadRight(maxLength, '.'))@(": ")@Html.Raw(Model.Fixture.OrigVenueName ?? Localizer["unknown"].Value)
    @Html.Raw(Environment.NewLine)
    @Html.Raw(VenueLabel[1].PadRight(maxLength, '.'))@(": ")@Html.Raw(Model.Fixture.VenueName ?? Localizer["unknown"].Value)
    @Html.Raw(Environment.NewLine)@Html.Raw(Environment.NewLine)@Html.Raw(Environment.NewLine)
}
else
{
    @Html.Raw(VenueLabel[0])@(": ")@Html.Raw(Model.Fixture.VenueName ?? Localizer["unknown"].Value)
    @Html.Raw(Environment.NewLine)@Html.Raw(Environment.NewLine)@Html.Raw(Environment.NewLine)
}
@Html.Raw(Localizer["Changes were submitted by"].Value)@(" ")@Html.Raw(Localizer["Changes were submitted by"].Value)@(" ")@Html.Raw(GetUsername() ?? "?").
@Html.Raw(Localizer["This notification has been sent to the contact persons of the teams"].Value).
@Html.Raw(Environment.NewLine)
@Html.Raw(Model.OrganizationContext.Name)
@Html.Raw(Environment.NewLine)
@Html.Raw(Localizer["ID"].Value) #@Html.Raw(Model.Fixture.Id) - @Html.Raw(Localizer["Number of changes"].Value): @Html.Raw(Model.Fixture.ChangeSerial)
@Html.Raw(Environment.NewLine)
