@using Microsoft.AspNetCore.Mvc.Localization
@model League.Models.MapViewModels.MapModel
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Venues"].Value + " - " + Model.Tournament?.Name;
}
@if (!Model.Venues.Exists(v => v is { Latitude: not null, Longitude: not null }))
{
    <div class="row">
        <div class="col-12 pb-2">
            <h2 class="h2">@ViewData["Title"]</h2>
            <div class="mb-0 pb-1">
                <site-alert type="Info" icon="fas fa-map-marker-alt" icon-size-class="fa-3x">
                    <h4 class="h4">@Localizer["There are no venue details available at this time"].</h4>
                </site-alert>
            </div>
        </div>
    </div>
    return;
}
<div class="row">
    <div class="col-12 pb-2">
        <h2 class="h2">@ViewData["Title"]</h2>
        @if (Model.IsSingleValue)
        {
            var venue = Model.Venues[0];
            <h3 class="h3"><i class="fas fa-map-marker-alt"></i> @venue.VenueName</h3>
            <hr class="mb-4" />
        }
        else
        {
            <hr class="mb-3" />
            <div class="mb-3">
                @Localizer["The following Google Map shows the venues of all registered teams. Clicking the <strong>blue marker</strong> will display more details"].
            </div>
        }

        <div id="map-canvas" class="rounded mb-2">
            <div>
                @Localizer["The map is currently loading"]...
            </div>
        </div>
        @if (Model.IsSingleValue && Model.Venues[0].Longitude.HasValue && Model.Venues[0].Latitude.HasValue && !Model.Venues[0].PrecisePosition)
        {
            <div class="mb-2">
                <i>@Localizer["Only an approximate map location was found for the venue address."]</i>
            </div>
        }
        @if (Model.IsSingleValue && !string.IsNullOrWhiteSpace(Model.Venues[0].Direction))
        {
            <div>
                <h5 class="h5">@Localizer["Notes"]</h5>
                @Model.Venues[0].Direction
            </div>
        }
    </div>
</div>
@section styles
{
    <style type="text/css">
        #map-canvas {
            border: 1px solid #979797;
            background-color: #e5e3df;
            width: 100%;
            height: 600px;
            color: black;
        }

        #map-canvas b {
            font-weight: bold !important;
        }

        #map-canvas > div {
            padding: .5em;
        }
    </style>
}
@section scripts
{
<script>
//<![CDATA[

    /* global google */

    // Google Maps async callback
    function mapInitializer() {
        const locations = [@Html.Raw(Model.Locations)];
        let map, infoWindow;

        function setMapMarkers() {
            let marker;
            locations.forEach(location => {
                const venue = new google.maps.LatLng(location.Lat, location.Lng);

                marker = new google.maps.Marker({
                    position: venue,
                    map: map,
                    title: location.title,
                    icon: 'https://www.google.com/intl/en_us/mapfiles/ms/icons/blue-dot.png'
                });

                attachMessageWindow(marker, location.Descr);
            });
            if (locations.length === 1) {
                infoWindow.setContent(locations[0].Descr);
                infoWindow.open(map, marker);
            }
        }

        function attachMessageWindow(marker, text) {
            google.maps.event.addListener(marker,
                'click',
                function() {
                    infoWindow.setContent(text);
                    infoWindow.open(map, marker);
                });
        }

        if (@Model.IsSingleValue.ToString().ToLower()) {
            const mapOptions = {
                zoom: 15,
                center: new google.maps.LatLng(locations[0].Lat, locations[0].Lng),
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
            infoWindow = new google.maps.InfoWindow();
            setMapMarkers();
        } else {
            const mapOptions = {
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.TERRAIN
            };
            map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
            infoWindow = new google.maps.InfoWindow();

            const northEast = new google.maps.LatLng(@Model.MaxLatitude, @Model.MaxLongitude);
            const southWest = new google.maps.LatLng(@Model.MinLatitude, @Model.MinLongitude);
            const bounds = new google.maps.LatLngBounds(southWest, northEast);
            map.fitBounds(bounds);
            setMapMarkers();
        }
    }
//]]>
</script>
<script async referrerpolicy="strict-origin-when-cross-origin" src="https://maps.googleapis.com/maps/api/js?key=@(Model.GoogleConfiguration!.WebApiKey)&callback=mapInitializer&loading=async"></script>
}
