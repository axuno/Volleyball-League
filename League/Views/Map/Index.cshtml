@using Microsoft.AspNetCore.Mvc.Localization
@model League.Models.MapViewModels.MapModel
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Venues"].Value + " - " + Model.Tournament?.Name;
}
@if (!Model.Venues.Exists(v => v is { Latitude: not null, Longitude: not null }))
{
    <div class="row">
        <div class="col-12 pb-2">
            <h2 class="h2">@ViewData["Title"]</h2>
            <div class="mb-0 pb-1">
                <site-alert type="Info" icon="fas fa-map-marker-alt" icon-size-class="fa-3x">
                    <h4 class="h4">@Localizer["There are no venue details available at this time"].</h4>
                </site-alert>
            </div>
        </div>
    </div>
    return;
}
<div class="row">
    <div class="col-12 pb-2">
        <h2 class="h2">@ViewData["Title"]</h2>
        @if (Model.IsSingleValue)
        {
            var venue = Model.Venues[0];
            <h3 class="h3"><i class="fas fa-map-marker-alt"></i> @venue.VenueName</h3>
            <hr class="mb-4" />
        }
        else
        {
            <hr class="mb-3" />
            <div class="mb-3">
                @Localizer["The following Google Map shows the venues of all registered teams. Clicking the <strong>blue marker</strong> will display more details"].
            </div>
        }

        <div id="map-canvas" class="rounded mb-2">
            <div>
                @Localizer["The map is currently loading"]...
            </div>
        </div>
        @if (Model.IsSingleValue && Model.Venues[0].Longitude.HasValue && Model.Venues[0].Latitude.HasValue && !Model.Venues[0].PrecisePosition)
        {
            <div class="mb-2">
                <i>@Localizer["Only an approximate map location was found for the venue address."]</i>
            </div>
        }
        @if (Model.IsSingleValue && !string.IsNullOrWhiteSpace(Model.Venues[0].Direction))
        {
            <div>
                <h5 class="h5">@Localizer["Notes"]</h5>
                @Model.Venues[0].Direction
            </div>
        }
    </div>
</div>
@section styles
{
    <style type="text/css">
        #map-canvas {
            border: 1px solid #979797;
            background-color: #e5e3df;
            width: 100%;
            height: 600px;
            color: black;
        }

            #map-canvas b {
                font-weight: bold !important;
            }

            #map-canvas > div {
                padding: .5em;
            }
    </style>
}
@section scripts
{
<script>
//<![CDATA[

    /* global google */

    @* // Google Maps async callback *@
    window.mapInitializer = async function() {
        const locations = [@Html.Raw(Model.Locations)];
        let map, infoWindow;

        @* Destructure the necessary libraries from the Google Maps API *@
        @* ReSharper disable once InconsistentNaming *@
        const { Map: MapLib } = await google.maps.importLibrary('maps');
        @* ReSharper disable once InconsistentNaming *@
        const { AdvancedMarkerElement: MarkerLib } = await google.maps.importLibrary('marker');

        function setMapMarkers() {
            let lastMarker; @* // To keep track of the last marker for single location scenario *@
            locations.forEach(locationData => {
                const venuePosition = new google.maps.LatLng(locationData.Lat, locationData.Lng);

                const pin = new google.maps.marker.PinElement({
                    background: '#1976d2',
                    borderColor: '#0d47a1',
                    glyphColor: '#fff'
                });

                @* // Create AdvancedMarkerElement *@
                const marker = new MarkerLib({
                    map: map,
                    position: venuePosition,
                    title: locationData.title,
                    content: pin.element @* // custom HTML can be used here for custom icons *@
                });

                attachMessageWindow(marker, locationData.Descr);
                lastMarker = marker;
            });

            if (locations.length === 1 && lastMarker) {
                infoWindow.setContent(locations[0].Descr);
                @* // For AdvancedMarkerElement, InfoWindow.open can take the map and marker directly *@
                @* // Open the infoWindow for the last marker *@
                infoWindow.open(map, lastMarker);
            }
        }

        function attachMessageWindow(marker, text) {
            @* // Use 'gmp-click' for AdvancedMarkerElement *@
            marker.addListener('gmp-click', function() {
                infoWindow.setContent(text);
                @* // For AdvancedMarkerElement, InfoWindow.open can take the map and marker directly *@
                infoWindow.open(map, marker);
            });
        }

        if (@Model.IsSingleValue.ToString().ToLower()) {
            const mapOptions = {
                zoom: 15,
                center: new google.maps.LatLng(locations[0].Lat, locations[0].Lng),
                mapId: '@Model.GoogleConfiguration!.MapId', @* // Required for Advanced Markers, can be 'DEMO_MAP_ID' *@
                mapTypeId: google.maps.MapTypeId.ROADMAP @* // mapTypeId is less relevant if mapId is used for vector maps *@
            };
            map = new MapLib(document.getElementById('map-canvas'), mapOptions);
            infoWindow = new google.maps.InfoWindow();
            setMapMarkers();
        } else {
            const mapOptions = {
                zoom: 10,
                mapId: '@Model.GoogleConfiguration!.MapId', @* // Required for Advanced Markers, can be 'DEMO_MAP_ID' *@
                mapTypeId: google.maps.MapTypeId.TERRAIN  @*// mapTypeId is less relevant if mapId is used for vector maps *@
            };
            map = new MapLib(document.getElementById('map-canvas'), mapOptions);
            infoWindow = new google.maps.InfoWindow();

            const northEast = new google.maps.LatLng(@Model.MaxLatitude, @Model.MaxLongitude);
            const southWest = new google.maps.LatLng(@Model.MinLatitude, @Model.MinLongitude);
            const bounds = new google.maps.LatLngBounds(southWest, northEast);
            map.fitBounds(bounds);
            setMapMarkers();
        }
    }
//]]>
</script>
<script async referrerpolicy="strict-origin-when-cross-origin" src="https://maps.googleapis.com/maps/api/js?key=@(Model.GoogleConfiguration!.WebApiKey)&callback=mapInitializer&loading=async"></script>
}
