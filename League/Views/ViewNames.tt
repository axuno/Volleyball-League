<# // https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates?view=vs-2019 #>
<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<# /* This assembly provides access to Visual Studio project properties. */ #>
<#@ assembly name="EnvDTE" #>
<#
const int tabSize = 4;
void ProcessFiles(string path, bool skipFiles, int level)
{
    var files = Directory.GetFiles(path, "*.cshtml");
    if (!skipFiles)
    {
        foreach (var file in files)
        {
#><#=new string(' ', level * tabSize)#>public const string <#= Path.GetFileNameWithoutExtension(file).Replace(".txt", ".Txt").Replace(".", "") #> = "<#= Path.GetFileNameWithoutExtension(file) #>";
<#
        }
    }

    var directories = Directory.GetDirectories(path);
    foreach (var directory in directories)
    {
#><#=new string(' ', level * tabSize)#>public static class <#= Path.GetFileName(directory).Replace('-', '_') #>
<#=new string(' ', level * tabSize)#>{
<#
        // Process each directory recursively
        level++;
        ProcessFiles(directory, false, level);
        level--;
#>
<#=new string(' ', level * tabSize)#>}
<#
    }
}
#>
<#
void CreateAreas(string areaPath)
{
    var level = 1;
#><#=new string(' ', level * tabSize)#>public static class Area
<#=new string(' ', level * tabSize)#>{
<#
    var directories = Directory.GetDirectories(areaPath);
    level++;
    foreach (var directory in directories)
    {
#><#=new string(' ', level * tabSize)#>public static class <#= Path.GetFileName(directory).Replace('-', '_') #>
<#=new string(' ', level * tabSize)#>{
<#
        // Process each directory recursively
        level++;
        ProcessFiles(directory + "\\Views\\", false, level);
        level--;
#>
<#=new string(' ', level * tabSize)#>}
<#
    }
    level--;
#>
<#=new string(' ', level * tabSize)#>}
<#
}
#>
<#
    var serviceProvider = this.Host as IServiceProvider;
    var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
    var solutionDirectory = System.IO.Path.GetDirectoryName(dte.Solution.FullName);
    var viewsFolderPath = Path.Combine(solutionDirectory, "League\\Views\\");
    var areaFolderPath = Path.Combine(solutionDirectory, "League\\Areas\\");
#>
/* 
 * This file was generated by T4 - do not edit.
 * Contains constants for strongly typed views in controllers.
 * Directories (may be nested) are static class names, views are constant strings.
 */

namespace League.ViewNames
{
<# ProcessFiles(viewsFolderPath, true, 1); #>
<# CreateAreas(areaFolderPath);#>
}