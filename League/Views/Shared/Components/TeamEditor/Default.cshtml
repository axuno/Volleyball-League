@using System.Globalization
@using Microsoft.AspNetCore.Mvc.Localization
@{ Layout = null; 
ViewContext.ViewData.TemplateInfo.HtmlFieldPrefix = Model.HtmlFieldPrefix;
}
@inject IViewLocalizer Localizer
@model League.Components.TeamEditorComponentModel
<div class="row">
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="IsNew" />
    <div class="mb-3 col-12 col-md-6">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" type="text" autofocus autocomplete="off" class="form-control" />
        @*<span asp-validation-for="Name" class="text-danger"></span>*@
    </div>
</div>
<div class="row">
    <div class="mb-3 col-12 col-md-6">
        <label asp-for="ClubName" class="form-label"></label>
        <input asp-for="ClubName" type="text" autocomplete="off" class="form-control" />
        @*<span asp-validation-for="ClubName" class="text-danger"></span>*@
    </div>
</div>
<div class="row">
    <div class="mb-3 col-12 col-md-6">
        <label asp-for="MatchDayOfWeek" class="form-label"></label>
        <div class="input-group">
            <select asp-for="MatchDayOfWeek" class="form-select d-block col-6" style="min-width: max-content !important" title="@Localizer["Please select a weekday"]...">
                <option value="@((int)DayOfWeek.Monday)">@DateTimeFormatInfo.CurrentInfo.GetDayName(DayOfWeek.Monday)</option>
                <option value="@((int)DayOfWeek.Tuesday)">@DateTimeFormatInfo.CurrentInfo.GetDayName(DayOfWeek.Tuesday)</option>
                <option value="@((int)DayOfWeek.Wednesday)">@DateTimeFormatInfo.CurrentInfo.GetDayName(DayOfWeek.Wednesday)</option>
                <option value="@((int)DayOfWeek.Thursday)">@DateTimeFormatInfo.CurrentInfo.GetDayName(DayOfWeek.Thursday)</option>
                <option value="@((int)DayOfWeek.Friday)">@DateTimeFormatInfo.CurrentInfo.GetDayName(DayOfWeek.Friday)</option>
                <option value="@((int)DayOfWeek.Saturday)">@DateTimeFormatInfo.CurrentInfo.GetDayName(DayOfWeek.Saturday)</option>
                <option value="@((int)DayOfWeek.Sunday)">@DateTimeFormatInfo.CurrentInfo.GetDayName(DayOfWeek.Sunday)</option>
                @if (Model.MatchDayOfWeek == null)
                {
                    <option value="" selected="selected">@Localizer["Not specified"]</option>
                }
                else
                {
                    <option value="">@Localizer["Not specified"]</option>
                }
            </select>
            <span id="@Html.IdFor(m => m.MatchDayOfWeek)" class="input-group-text">
                <i class="far fa-calendar-alt"></i>
            </span>
            @*<span asp-validation-for="MatchDayOfWeek" class="text-danger"></span>*@
        </div>
    </div>
</div>
<div class="row">
    <div class="mb-3 col-12 col-md-6">
        <label asp-for="MatchTime" class="form-label"></label>
        <div id="@(Model.MatchTime)-c" class="input-group" data-input-type="time" data-td-target-input="nearest" data-td-target-toggle="nearest">
            <input asp-for="MatchTime" type="text" asp-format="{0:@(CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern)}" autocomplete="off" class="form-control" aria-describedby="@nameof(Model.MatchTime)HelpBlock" />
            <span class="input-group-text" data-td-target="@nameof(Model.MatchTime)-c" data-td-toggle="datetimepicker">
                <i class="far fa-clock"></i>
            </span>
        </div>
        <small id="@nameof(Model.MatchTime)HelpBlock" class="d-block form-text text-muted">
            @Localizer["Time format"]: @(CultureInfo.CurrentUICulture.DateTimeFormat.ShortTimePattern.ToUpperInvariant().Replace("TT", "AM/PM"))
        </small>
        @*<span asp-validation-for="MatchTime" class="text-danger"></span>*@
    </div>
</div>
<script type="text/javascript" site-on-modal-shown="true">
    const onMatchDayOfWeekChangeFunction = function() {
        const matchTimeEle = document.getElementById('@Html.IdFor(m => m.MatchTime)');
        if (this.value === '') {
            matchTimeEle.setAttribute('disabled', 'disabled');
            matchTimeEle.style.cursor = 'not-allowed';
            matchTimeEle.value = '';
            document.querySelector('span[data-td-target="@nameof(Model.MatchTime)-c"]').style.cursor = 'not-allowed';
        } else {
            matchTimeEle.removeAttribute('disabled');
            matchTimeEle.style.cursor = 'auto';
            document.querySelector('span[data-td-target="@nameof(Model.MatchTime)-c"]').style.cursor = 'pointer';
        }
    };
    const matchDayOfWeek = document.getElementById('@Html.IdFor(m => m.MatchDayOfWeek)');
    matchDayOfWeek.removeEventListener('change', onMatchDayOfWeekChangeFunction);
    matchDayOfWeek.addEventListener('change', onMatchDayOfWeekChangeFunction);
    matchDayOfWeek.dispatchEvent(new Event('change')); // initialize

    const locale = '@(CultureInfo.CurrentCulture.ToString())';
    const parentLocale = '@(CultureInfo.CurrentCulture.Parent.TwoLetterISOLanguageName)';
    const hourCycle = '@(CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern.Contains("t") ? 12 : 24)';

    const tdFactory = new Site.TempusDominusFactory(locale, parentLocale, hourCycle, false);
    [].forEach.call(document.querySelectorAll('[data-input-type="time"]'), function (el) {
        tdFactory.CreateTimePicker(el, '@(CultureInfo.CurrentCulture.DateTimeFormat.ShortTimePattern.Replace("tt", "T"))');
    });
</script>
